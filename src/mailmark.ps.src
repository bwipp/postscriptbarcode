% Barcode Writer in Pure PostScript
% https://bwipp.terryburton.co.uk
%
% Copyright (c) 2004-2024 Terry Burton
%
% $Id$
%
% Permission is hereby granted, free of charge, to any
% person obtaining a copy of this software and associated
% documentation files (the "Software"), to deal in the
% Software without restriction, including without
% limitation the rights to use, copy, modify, merge,
% publish, distribute, sublicense, and/or sell copies of
% the Software, and to permit persons to whom the Software
% is furnished to do so, subject to the following
% conditions:
%
% The above copyright notice and this permission notice
% shall be included in all copies or substantial portions
% of the Software.
%
% THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
% KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO
% THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
% PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
% THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
% DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
% CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
% CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
% IN THE SOFTWARE.

% --BEGIN ENCODER mailmark--
% --REQUIRES preamble loadctx unloadctx raiseerror processoptions parseinput renmatrix datamatrix--
% --DESC: Royal Mail Mailmark
% --EXAM: JGB 012100123412345678AB19XY1A 0             www.xyz.com
% --EXOP: type=29
% --RNDR: renmatrix
/setpacking where {pop currentpacking true setpacking} if
10 dict
dup /raiseerror dup /uk.co.terryburton.bwipp findresource put
dup /processoptions dup /uk.co.terryburton.bwipp findresource put
dup /parseinput dup /uk.co.terryburton.bwipp findresource put
dup /renmatrix dup /uk.co.terryburton.bwipp findresource put
dup /datamatrix dup /uk.co.terryburton.bwipp findresource put
begin
/mailmark {

    20 dict begin            % Confine variables to local scope

    /ctx null def
    /type (unset) def  % 7, 9 or 29
    /parse false def
    /dontdraw false def

    //processoptions exec /options exch def
    /barcode exch def

    % Parse ordinals of the form ^NNN to ASCII
    /fncvals <<
        /parse parse
        /parseonly true
        /parsefnc false
    >> def
    /barcode barcode fncvals //parseinput exec def
    /barlen barcode length def
    options (parse) undef

    % Map the given type to a format and version of Data Matrix
    /type load dup (7) ne exch dup (9) ne exch (29) ne and and {
        /bwipp.mailmarkBadType (Royal Mail Mailmark type must be 7, 9 or 29) //raiseerror exec
    } if
    <<
        (7)  (24x24)
        (9)  (32x32)
        (29) (16x48)
    >> /type load get /version exch def

    <<
        (7)  (square)
        (9)  (square)
        (29) (rectangle)
    >> /type load get /format exch def

    % Validate the input
    barcode length 45 lt {
        /bwipp.mailmarkBadLength (Royal Mail Mailmark must contain at least 45 characters of Mailmark formatted data, including any required space padding) //raiseerror exec
    } if
    barcode 0 4 getinterval (JGB ) ne {
        /bwipp.mailmarkBadIndicator (Royal Mail Mailmark must begin with JGB<space> identifier) //raiseerror exec
    } if

    % Get the result of encoding with datamatrix
    options (dontdraw) true put
    options (version) version put
    options (format) format put
    options (c40headerlength) 45 put
    /args barcode options //datamatrix exec def

    args (opt) options put
    args

    dontdraw not //renmatrix if

    end

}
[/barcode] {null def} forall
bind def
/mailmark dup load /uk.co.terryburton.bwipp defineresource pop
end
/setpacking where {pop setpacking} if
% --END ENCODER mailmark--
