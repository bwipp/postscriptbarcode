% Barcode Writer in Pure PostScript
% https://bwipp.terryburton.co.uk
%
% Copyright (c) 2004-2024 Terry Burton
%
% $Id$
%
% Permission is hereby granted, free of charge, to any
% person obtaining a copy of this software and associated
% documentation files (the "Software"), to deal in the
% Software without restriction, including without
% limitation the rights to use, copy, modify, merge,
% publish, distribute, sublicense, and/or sell copies of
% the Software, and to permit persons to whom the Software
% is furnished to do so, subject to the following
% conditions:
%
% The above copyright notice and this permission notice
% shall be included in all copies or substantial portions
% of the Software.
%
% THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
% KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO
% THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
% PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
% THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
% DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
% CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
% CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
% IN THE SOFTWARE.

% --BEGIN ENCODER hanxin--
% --REQUIRES preamble loadctx unloadctx raiseerror processoptions parseinput renmatrix--
% --DESC: Han Xin Code
% --EXAM: This is Han Xin
% --EXOP:
% --RNDR: renmatrix
/setpacking where {pop currentpacking true setpacking} if
10 dict
dup /loadctx dup /uk.co.terryburton.bwipp findresource put
dup /unloadctx dup /uk.co.terryburton.bwipp findresource put
dup /raiseerror dup /uk.co.terryburton.bwipp findresource put
dup /processoptions dup /uk.co.terryburton.bwipp findresource put
dup /parseinput dup /uk.co.terryburton.bwipp findresource put
dup /renmatrix dup /uk.co.terryburton.bwipp findresource put
begin
/hanxin {

    20 dict begin

    /ctx null def
    /dontdraw false def
    /version (unset) def   % 1-84
    /eclevel (L2) def   % L1, L2, L3 or L4
    /parse false def
    /parsefnc false def
    /mask -1 def

    //processoptions exec /options exch def
    /barcode exch def

    barcode () eq {
        /bwipp.hanxinEmptyData (The data must not be empty) //raiseerror exec
    } if

    version (unset) ne {
        version length dup 1 ge exch 2 le and dup {
            pop
            true version {dup 48 lt exch 57 gt or { pop false } if } forall dup {
                pop version cvi dup 1 ge exch 84 le and
            } if
        } if
        not {
            /bwipp.hanxinInvalidVersion (Valid versions are 1 to 84) //raiseerror exec
        } if
    } if

    eclevel length 2 eq dup {
        pop eclevel 0 1 getinterval (L) dup eq {
            pop eclevel 1 get 48 sub dup 1 ge exch 4 le and
        } if
    } if
    not {
        /bwipp.hanxinInvalidErrorCorrectionLevel (Valid error correction levels are L1 to L4) //raiseerror exec
    } if

    mask -1 ne {
        mask 1 lt mask 4 gt or {
            /bwipp.hanxinInvalidErrorCorrectionLevel (The valid masks are 1 to 4) //raiseerror exec
        } if
    } if

    /hanxin //loadctx exec

    % Parse the input
    /fncvals <<
        /parse parse
        /parsefnc parsefnc
        % No FNC characters defined
    >> def
    /msg barcode fncvals //parseinput exec def
    /msglen msg length def

    /tobin {
        string dup length 1 sub 0 exch 1 exch {1 index exch 48 put} for
        dup 3 -1 roll 2 2 index length string cvrs
        dup length 2 index length exch sub exch putinterval
    } def

    % Encode the data using byte mode encoding
    /bits 4 13 add msglen 8 mul add string def
    bits 0 (0011) putinterval
    bits 4 msglen 13 tobin putinterval
    0 1 msglen 1 sub {
        /i exch def
        bits 17 i 8 mul add msg i get 8 tobin putinterval
    } for

    % Lookup the most appropriate symbol specification
{
    /metrics [
        % vers size  align  modules            error correction blocks
        [ (1)    23  -1  0    205  [  1  21   4 ] [  0  -1  -1 ] [  0  -1  -1 ]
                                   [  1  17   8 ] [  0  -1  -1 ] [  0  -1  -1 ]
                                   [  1  13  12 ] [  0  -1  -1 ] [  0  -1  -1 ]
                                   [  1   9  16 ] [  0  -1  -1 ] [  0  -1  -1 ] ]
        [ (2)    25  -1  0    301  [  1  31   6 ] [  0  -1  -1 ] [  0  -1  -1 ]
                                   [  1  25  12 ] [  0  -1  -1 ] [  0  -1  -1 ]
                                   [  1  19  18 ] [  0  -1  -1 ] [  0  -1  -1 ]
                                   [  1  15  22 ] [  0  -1  -1 ] [  0  -1  -1 ] ]
        [ (3)    27  -1  0    405  [  1  42   8 ] [  0  -1  -1 ] [  0  -1  -1 ]
                                   [  1  34  16 ] [  0  -1  -1 ] [  0  -1  -1 ]
                                   [  1  26  24 ] [  0  -1  -1 ] [  0  -1  -1 ]
                                   [  1  20  30 ] [  0  -1  -1 ] [  0  -1  -1 ] ]
        [ (4)    29  14  1    439  [  1  46   8 ] [  0  -1  -1 ] [  0  -1  -1 ]
                                   [  1  38  16 ] [  0  -1  -1 ] [  0  -1  -1 ]
                                   [  1  30  24 ] [  0  -1  -1 ] [  0  -1  -1 ]
                                   [  1  22  32 ] [  0  -1  -1 ] [  0  -1  -1 ] ]
        [ (5)    31  16  1    555  [  1  57  12 ] [  0  -1  -1 ] [  0  -1  -1 ]
                                   [  1  49  20 ] [  0  -1  -1 ] [  0  -1  -1 ]
                                   [  1  37  32 ] [  0  -1  -1 ] [  0  -1  -1 ]
                                   [  1  14  20 ] [  1  13  22 ] [  0  -1  -1 ] ]
        [ (6)    33  16  1    675  [  1  70  14 ] [  0  -1  -1 ] [  0  -1  -1 ]
                                   [  1  58  26 ] [  0  -1  -1 ] [  0  -1  -1 ]
                                   [  1  24  20 ] [  1  22  18 ] [  0  -1  -1 ]
                                   [  1  16  24 ] [  1  18  26 ] [  0  -1  -1 ] ]
        [ (7)    35  17  1    805  [  1  84  16 ] [  0  -1  -1 ] [  0  -1  -1 ]
                                   [  1  70  30 ] [  0  -1  -1 ] [  0  -1  -1 ]
                                   [  1  26  22 ] [  1  28  24 ] [  0  -1  -1 ]
                                   [  2  14  20 ] [  1  12  20 ] [  0  -1  -1 ] ]
        [ (8)    37  18  1    943  [  1  99  18 ] [  0  -1  -1 ] [  0  -1  -1 ]
                                   [  1  40  18 ] [  1  41  18 ] [  0  -1  -1 ]
                                   [  1  31  26 ] [  1  32  28 ] [  0  -1  -1 ]
                                   [  2  16  24 ] [  1  15  22 ] [  0  -1  -1 ] ]
        [ (9)    39  19  1   1089  [  1 114  22 ] [  0  -1  -1 ] [  0  -1  -1 ]
                                   [  2  48  20 ] [  0  -1  -1 ] [  0  -1  -1 ]
                                   [  2  24  20 ] [  1  26  22 ] [  0  -1  -1 ]
                                   [  2  18  28 ] [  1  18  26 ] [  0  -1  -1 ] ]
        [ (10)   41  20  1   1243  [  1 131  24 ] [  0  -1  -1 ] [  0  -1  -1 ]
                                   [  1  52  22 ] [  1  57  24 ] [  0  -1  -1 ]
                                   [  2  27  24 ] [  1  29  24 ] [  0  -1  -1 ]
                                   [  2  21  32 ] [  1  19  30 ] [  0  -1  -1 ] ]
        [ (11)   43  14  2   1289  [  1 135  26 ] [  0  -1  -1 ] [  0  -1  -1 ]
                                   [  1  56  24 ] [  1  57  24 ] [  0  -1  -1 ]
                                   [  2  28  24 ] [  1  31  26 ] [  0  -1  -1 ]
                                   [  2  22  32 ] [  1  21  32 ] [  0  -1  -1 ] ]
        [ (12)   45  15  2   1455  [  1 153  28 ] [  0  -1  -1 ] [  0  -1  -1 ]
                                   [  1  62  26 ] [  1  65  28 ] [  0  -1  -1 ]
                                   [  2  32  28 ] [  1  33  28 ] [  0  -1  -1 ]
                                   [  3  17  26 ] [  1  22  30 ] [  0  -1  -1 ] ]
        [ (13)   47  16  2   1629  [  1  86  16 ] [  1  85  16 ] [  0  -1  -1 ]
                                   [  1  71  30 ] [  1  72  30 ] [  0  -1  -1 ]
                                   [  2  37  32 ] [  1  35  30 ] [  0  -1  -1 ]
                                   [  3  20  30 ] [  1  21  32 ] [  0  -1  -1 ] ]
        [ (14)   49  16  2   1805  [  1  94  18 ] [  1  95  18 ] [  0  -1  -1 ]
                                   [  2  51  22 ] [  1  55  24 ] [  0  -1  -1 ]
                                   [  3  30  26 ] [  1  31  26 ] [  0  -1  -1 ]
                                   [  4  18  28 ] [  1  17  24 ] [  0  -1  -1 ] ]
        [ (15)   51  17  2   1995  [  1 104  20 ] [  1 105  20 ] [  0  -1  -1 ]
                                   [  2  57  24 ] [  1  61  26 ] [  0  -1  -1 ]
                                   [  3  33  28 ] [  1  36  30 ] [  0  -1  -1 ]
                                   [  4  20  30 ] [  1  19  30 ] [  0  -1  -1 ] ]
        [ (16)   53  17  2   2187  [  1 115  22 ] [  1 114  22 ] [  0  -1  -1 ]
                                   [  2  65  28 ] [  1  61  26 ] [  0  -1  -1 ]
                                   [  3  38  32 ] [  1  33  30 ] [  0  -1  -1 ]
                                   [  5  19  28 ] [  1  14  24 ] [  0  -1  -1 ] ]
        [ (17)   55  18  2   2393  [  1 126  24 ] [  1 125  24 ] [  0  -1  -1 ]
                                   [  2  70  30 ] [  1  69  30 ] [  0  -1  -1 ]
                                   [  4  33  28 ] [  1  29  26 ] [  0  -1  -1 ]
                                   [  5  20  30 ] [  1  19  30 ] [  0  -1  -1 ] ]
        [ (18)   57  19  2   2607  [  1 136  26 ] [  1 137  26 ] [  0  -1  -1 ]
                                   [  3  56  24 ] [  1  59  26 ] [  0  -1  -1 ]
                                   [  5  35  30 ] [  0  -1  -1 ] [  0  -1  -1 ]
                                   [  6  18  28 ] [  1  21  28 ] [  0  -1  -1 ] ]
        [ (19)   59  20  2   2829  [  1 148  28 ] [  1 149  28 ] [  0  -1  -1 ]
                                   [  3  61  26 ] [  1  64  28 ] [  0  -1  -1 ]
                                   [  7  24  20 ] [  1  23  22 ] [  0  -1  -1 ]
                                   [  6  20  30 ] [  1  21  32 ] [  0  -1  -1 ] ]
        [ (20)   61  20  2   3053  [  3 107  20 ] [  0  -1  -1 ] [  0  -1  -1 ]
                                   [  3  65  28 ] [  1  72  30 ] [  0  -1  -1 ]
                                   [  7  26  22 ] [  1  23  22 ] [  0  -1  -1 ]
                                   [  7  19  28 ] [  1  20  32 ] [  0  -1  -1 ] ]
        [ (21)   63  21  2   3291  [  3 115  22 ] [  0  -1  -1 ] [  0  -1  -1 ]
                                   [  4  56  24 ] [  1  63  28 ] [  0  -1  -1 ]
                                   [  7  28  24 ] [  1  25  22 ] [  0  -1  -1 ]
                                   [  8  18  28 ] [  1  21  22 ] [  0  -1  -1 ] ]
        [ (22)   65  16  3   3383  [  2 116  22 ] [  1 122  24 ] [  0  -1  -1 ]
                                   [  4  56  24 ] [  1  72  30 ] [  0  -1  -1 ]
                                   [  7  28  24 ] [  1  32  26 ] [  0  -1  -1 ]
                                   [  8  18  28 ] [  1  24  30 ] [  0  -1  -1 ] ]
        [ (23)   67  17  3   3631  [  3 127  24 ] [  0  -1  -1 ] [  0  -1  -1 ]
                                   [  5  51  22 ] [  1  62  26 ] [  0  -1  -1 ]
                                   [  7  30  26 ] [  1  35  26 ] [  0  -1  -1 ]
                                   [  8  20  30 ] [  1  21  32 ] [  0  -1  -1 ] ]
        [ (24)   69  17  3   3887  [  2 135  26 ] [  1 137  26 ] [  0  -1  -1 ]
                                   [  5  56  24 ] [  1  59  26 ] [  0  -1  -1 ]
                                   [  7  33  28 ] [  1  30  28 ] [  0  -1  -1 ]
                                   [ 11  16  24 ] [  1  19  26 ] [  0  -1  -1 ] ]
        [ (25)   71  18  3   4151  [  3 105  20 ] [  1 121  22 ] [  0  -1  -1 ]
                                   [  5  61  26 ] [  1  57  26 ] [  0  -1  -1 ]
                                   [  9  28  24 ] [  1  28  22 ] [  0  -1  -1 ]
                                   [ 10  19  28 ] [  1  18  30 ] [  0  -1  -1 ] ]
        [ (26)   73  18  3   4423  [  2 157  30 ] [  1 150  28 ] [  0  -1  -1 ]
                                   [  5  65  28 ] [  1  61  26 ] [  0  -1  -1 ]
                                   [  8  33  28 ] [  1  34  30 ] [  0  -1  -1 ]
                                   [ 10  19  28 ] [  2  15  26 ] [  0  -1  -1 ] ]
        [ (27)   75  19  3   4703  [  3 126  24 ] [  1 115  22 ] [  0  -1  -1 ]
                                   [  7  51  22 ] [  1  54  22 ] [  0  -1  -1 ]
                                   [  8  35  30 ] [  1  37  30 ] [  0  -1  -1 ]
                                   [ 15  15  22 ] [  1  10  22 ] [  0  -1  -1 ] ]
        [ (28)   77  19  3   4991  [  4 105  20 ] [  1 103  20 ] [  0  -1  -1 ]
                                   [  7  56  24 ] [  1  45  18 ] [  0  -1  -1 ]
                                   [ 10  31  26 ] [  1  27  26 ] [  0  -1  -1 ]
                                   [ 10  17  26 ] [  3  20  28 ] [  1  21  28 ] ]
        [ (29)   79  20  3   5287  [  3 139  26 ] [  1 137  28 ] [  0  -1  -1 ]
                                   [  6  66  28 ] [  1  66  30 ] [  0  -1  -1 ]
                                   [  9  36  30 ] [  1  34  32 ] [  0  -1  -1 ]
                                   [ 13  19  28 ] [  1  17  32 ] [  0  -1  -1 ] ]
        [ (30)   81  20  3   5591  [  6  84  16 ] [  1  82  16 ] [  0  -1  -1 ]
                                   [  6  70  30 ] [  1  68  30 ] [  0  -1  -1 ]
                                   [  7  35  30 ] [  3  33  28 ] [  1  32  28 ]
                                   [ 13  20  30 ] [  1  20  28 ] [  0  -1  -1 ] ]
        [ (31)   83  21  3   5903  [  5 105  20 ] [  1  94  18 ] [  0  -1  -1 ]
                                   [  6  74  32 ] [  1  71  30 ] [  0  -1  -1 ]
                                   [ 11  33  28 ] [  1  34  32 ] [  0  -1  -1 ]
                                   [ 13  19  28 ] [  3  16  26 ] [  0  -1  -1 ] ]
        [ (32)   85  17  4   6033  [  4 127  24 ] [  1 126  24 ] [  0  -1  -1 ]
                                   [  7  66  28 ] [  1  66  30 ] [  0  -1  -1 ]
                                   [ 12  30  24 ] [  1  24  28 ] [  1  24  30 ]
                                   [ 15  19  28 ] [  1  17  32 ] [  0  -1  -1 ] ]
        [ (33)   87  17  4   6353  [  7  84  16 ] [  1  78  16 ] [  0  -1  -1 ]
                                   [  7  70  30 ] [  1  66  28 ] [  0  -1  -1 ]
                                   [ 12  33  28 ] [  1  32  30 ] [  0  -1  -1 ]
                                   [ 14  21  32 ] [  1  24  28 ] [  0  -1  -1 ] ]
        [ (34)   89  18  4   6689  [  5 117  22 ] [  1 117  24 ] [  0  -1  -1 ]
                                   [  8  66  28 ] [  1  58  26 ] [  0  -1  -1 ]
                                   [ 11  38  32 ] [  1  34  32 ] [  0  -1  -1 ]
                                   [ 15  20  30 ] [  2  17  26 ] [  0  -1  -1 ] ]
        [ (35)   91  18  4   7025  [  4 148  28 ] [  1 146  28 ] [  0  -1  -1 ]
                                   [  8  68  30 ] [  1  70  24 ] [  0  -1  -1 ]
                                   [ 10  36  32 ] [  3  38  28 ] [  0  -1  -1 ]
                                   [ 16  19  28 ] [  3  16  26 ] [  0  -1  -1 ] ]
        [ (36)   93  19  4   7377  [  4 126  24 ] [  2 135  26 ] [  0  -1  -1 ]
                                   [  8  70  28 ] [  2  43  26 ] [  0  -1  -1 ]
                                   [ 13  32  28 ] [  2  41  30 ] [  0  -1  -1 ]
                                   [ 17  19  28 ] [  3  15  26 ] [  0  -1  -1 ] ]
        [ (37)   95  19  4   7729  [  5 136  26 ] [  1 132  24 ] [  0  -1  -1 ]
                                   [  5  67  30 ] [  4  68  28 ] [  1  69  28 ]
                                   [ 14  35  30 ] [  1  32  24 ] [  0  -1  -1 ]
                                   [ 18  18  26 ] [  3  16  28 ] [  1  14  28 ] ]
        [ (38)   97  19  4   8089  [  3 142  26 ] [  3 141  28 ] [  0  -1  -1 ]
                                   [  8  70  30 ] [  1  73  32 ] [  1  74  32 ]
                                   [ 12  34  30 ] [  3  34  26 ] [  1  35  28 ]
                                   [ 18  21  32 ] [  1  27  30 ] [  0  -1  -1 ] ]
        [ (39)   99  20  4   8465  [  5 116  22 ] [  2 103  20 ] [  1 102  20 ]
                                   [  9  74  32 ] [  1  74  30 ] [  0  -1  -1 ]
                                   [ 14  34  28 ] [  2  32  32 ] [  1  32  30 ]
                                   [ 19  21  32 ] [  1  25  26 ] [  0  -1  -1 ] ]
        [ (40)  101  20  4   8841  [  7 116  22 ] [  1 117  22 ] [  0  -1  -1 ]
                                   [ 11  65  28 ] [  1  58  24 ] [  0  -1  -1 ]
                                   [ 15  38  32 ] [  1  27  28 ] [  0  -1  -1 ]
                                   [ 20  20  30 ] [  1  20  32 ] [  1  21  32 ] ]
        [ (41)  103  17  5   9009  [  6 136  26 ] [  1 130  24 ] [  0  -1  -1 ]
                                   [ 11  66  28 ] [  1  62  30 ] [  0  -1  -1 ]
                                   [ 14  34  28 ] [  3  34  32 ] [  1  30  30 ]
                                   [ 18  20  30 ] [  3  20  28 ] [  2  15  26 ] ]
        [ (42)  105  17  5   9401  [  5 105  20 ] [  2 115  22 ] [  2 116  22 ]
                                   [ 10  75  32 ] [  1  73  32 ] [  0  -1  -1 ]
                                   [ 16  38  32 ] [  1  27  28 ] [  0  -1  -1 ]
                                   [ 22  19  28 ] [  2  16  30 ] [  1  19  30 ] ]
        [ (43)  107  18  5   9799  [  6 147  28 ] [  1 146  28 ] [  0  -1  -1 ]
                                   [ 11  66  28 ] [  2  65  30 ] [  0  -1  -1 ]
                                   [ 18  33  28 ] [  2  33  30 ] [  0  -1  -1 ]
                                   [ 22  21  32 ] [  1  28  30 ] [  0  -1  -1 ] ]
        [ (44)  109  18  5  10207  [  6 116  22 ] [  3 125  24 ] [  0  -1  -1 ]
                                   [ 11  75  32 ] [  1  68  30 ] [  0  -1  -1 ]
                                   [ 13  35  28 ] [  6  34  32 ] [  1  30  30 ]
                                   [ 23  21  32 ] [  1  26  30 ] [  0  -1  -1 ] ]
        [ (45)  111  18  5  10623  [  7 105  20 ] [  4  95  18 ] [  0  -1  -1 ]
                                   [ 12  67  28 ] [  1  63  30 ] [  1  62  32 ]
                                   [ 21  31  26 ] [  2  33  32 ] [  0  -1  -1 ]
                                   [ 23  21  32 ] [  2  24  30 ] [  0  -1  -1 ] ]
        [ (46)  113  19  5  11045  [ 10 116  22 ] [  0  -1  -1 ] [  0  -1  -1 ]
                                   [ 12  74  32 ] [  1  78  30 ] [  0  -1  -1 ]
                                   [ 18  37  32 ] [  1  39  30 ] [  1  41  28 ]
                                   [ 25  21  32 ] [  1  27  28 ] [  0  -1  -1 ] ]
        [ (47)  115  19  5  11477  [  5 126  24 ] [  4 115  22 ] [  1 114  22 ]
                                   [ 12  67  28 ] [  2  66  32 ] [  1  68  30 ]
                                   [ 21  35  30 ] [  1  39  30 ] [  0  -1  -1 ]
                                   [ 26  21  32 ] [  1  28  28 ] [  0  -1  -1 ] ]
        [ (48)  117  19  5  11917  [  9 126  24 ] [  1 117  22 ] [  0  -1  -1 ]
                                   [ 13  75  32 ] [  1  68  30 ] [  0  -1  -1 ]
                                   [ 20  35  30 ] [  3  35  28 ] [  0  -1  -1 ]
                                   [ 27  21  32 ] [  1  28  30 ] [  0  -1  -1 ] ]
        [ (49)  119  17  6  12111  [  9 126  24 ] [  1 137  26 ] [  0  -1  -1 ]
                                   [ 13  71  30 ] [  2  68  32 ] [  0  -1  -1 ]
                                   [ 20  37  32 ] [  1  39  28 ] [  1  38  28 ]
                                   [ 24  20  32 ] [  5  25  28 ] [  0  -1  -1 ] ]
        [ (50)  121  17  6  12559  [  8 147  28 ] [  1 141  28 ] [  0  -1  -1 ]
                                   [ 10  73  32 ] [  4  74  30 ] [  1  73  30 ]
                                   [ 16  36  32 ] [  6  39  30 ] [  1  37  30 ]
                                   [ 27  21  32 ] [  3  20  26 ] [  0  -1  -1 ] ]
        [ (51)  123  18  6  13025  [  9 137  26 ] [  1 135  26 ] [  0  -1  -1 ]
                                   [ 12  70  30 ] [  4  75  32 ] [  0  -1  -1 ]
                                   [ 24  35  30 ] [  1  40  28 ] [  0  -1  -1 ]
                                   [ 23  20  32 ] [  8  24  30 ] [  0  -1  -1 ] ]
        [ (52)  125  18  6  13489  [ 14  95  18 ] [  1  86  18 ] [  0  -1  -1 ]
                                   [ 13  73  32 ] [  3  77  30 ] [  0  -1  -1 ]
                                   [ 24  35  30 ] [  2  35  28 ] [  0  -1  -1 ]
                                   [ 26  21  32 ] [  5  21  30 ] [  1  23  30 ] ]
        [ (53)  127  18  6  13961  [  9 147  28 ] [  1 142  28 ] [  0  -1  -1 ]
                                   [ 10  73  30 ] [  6  70  32 ] [  1  71  32 ]
                                   [ 25  35  30 ] [  2  34  26 ] [  0  -1  -1 ]
                                   [ 29  21  32 ] [  4  22  30 ] [  0  -1  -1 ] ]
        [ (54)  129  18  6  14441  [ 11 126  24 ] [  1 131  24 ] [  0  -1  -1 ]
                                   [ 16  74  32 ] [  1  79  30 ] [  0  -1  -1 ]
                                   [ 25  38  32 ] [  1  25  30 ] [  0  -1  -1 ]
                                   [ 33  21  32 ] [  1  28  28 ] [  0  -1  -1 ] ]
        [ (55)  131  19  6  14939  [ 14 105  20 ] [  1  99  18 ] [  0  -1  -1 ]
                                   [ 19  65  28 ] [  1  72  28 ] [  0  -1  -1 ]
                                   [ 24  37  32 ] [  2  40  30 ] [  1  41  30 ]
                                   [ 31  21  32 ] [  4  24  32 ] [  0  -1  -1 ] ]
        [ (56)  133  19  6  15435  [ 10 147  28 ] [  1 151  28 ] [  0  -1  -1 ]
                                   [ 15  71  30 ] [  3  71  32 ] [  1  73  32 ]
                                   [ 24  37  32 ] [  3  38  30 ] [  1  39  30 ]
                                   [ 36  19  30 ] [  3  29  26 ] [  0  -1  -1 ] ]
        [ (57)  135  19  6  15939  [ 15 105  20 ] [  1  99  18 ] [  0  -1  -1 ]
                                   [ 19  70  30 ] [  1  64  28 ] [  0  -1  -1 ]
                                   [ 27  38  32 ] [  2  25  26 ] [  0  -1  -1 ]
                                   [ 38  20  30 ] [  2  18  28 ] [  0  -1  -1 ] ]
        [ (58)  137  17  7  16171  [ 14 105  20 ] [  1 113  22 ] [  1 114  22 ]
                                   [ 17  67  30 ] [  3  92  32 ] [  0  -1  -1 ]
                                   [ 30  35  30 ] [  1  41  30 ] [  0  -1  -1 ]
                                   [ 36  21  32 ] [  1  26  30 ] [  1  27  30 ] ]
        [ (59)  139  17  7  16691  [ 11 146  28 ] [  1 146  26 ] [  0  -1  -1 ]
                                   [ 20  70  30 ] [  1  60  26 ] [  0  -1  -1 ]
                                   [ 29  38  32 ] [  1  24  32 ] [  0  -1  -1 ]
                                   [ 40  20  30 ] [  2  17  26 ] [  0  -1  -1 ] ]
        [ (60)  141  18  7  17215  [  3 137  26 ] [  1 136  26 ] [ 10 126  24 ]
                                   [ 22  65  28 ] [  1  75  30 ] [  0  -1  -1 ]
                                   [ 30  37  32 ] [  1  51  30 ] [  0  -1  -1 ]
                                   [ 42  20  30 ] [  1  21  30 ] [  0  -1  -1 ] ]
        [ (61)  143  18  7  17751  [ 12 126  24 ] [  2 118  22 ] [  1 116  22 ]
                                   [ 19  74  32 ] [  1  74  30 ] [  1  72  28 ]
                                   [ 30  38  32 ] [  2  29  30 ] [  0  -1  -1 ]
                                   [ 39  20  32 ] [  2  37  26 ] [  1  38  26 ] ]
        [ (62)  145  18  7  18295  [ 12 126  24 ] [  3 136  26 ] [  0  -1  -1 ]
                                   [ 21  70  30 ] [  2  65  28 ] [  0  -1  -1 ]
                                   [ 34  35  30 ] [  1  44  32 ] [  0  -1  -1 ]
                                   [ 42  20  30 ] [  2  19  28 ] [  2  18  28 ] ]
        [ (63)  147  18  7  18847  [ 12 126  24 ] [  3 117  22 ] [  1 116  22 ]
                                   [ 25  61  26 ] [  2  62  28 ] [  0  -1  -1 ]
                                   [ 34  35  30 ] [  1  40  32 ] [  1  41  32 ]
                                   [ 45  20  30 ] [  1  20  32 ] [  1  21  32 ] ]
        [ (64)  149  19  7  19403  [ 15 105  20 ] [  2 115  22 ] [  2 116  22 ]
                                   [ 25  65  28 ] [  1  72  28 ] [  0  -1  -1 ]
                                   [ 18  35  30 ] [ 17  37  32 ] [  1  50  32 ]
                                   [ 42  20  30 ] [  6  19  28 ] [  1  15  28 ] ]
        [ (65)  151  19  7  19971  [ 19 105  20 ] [  1 101  20 ] [  0  -1  -1 ]
                                   [ 33  51  22 ] [  1  65  22 ] [  0  -1  -1 ]
                                   [ 40  33  28 ] [  1  28  28 ] [  0  -1  -1 ]
                                   [ 49  20  30 ] [  1  18  28 ] [  0  -1  -1 ] ]
        [ (66)  153  17  8  20229  [ 18 105  20 ] [  2 117  22 ] [  0  -1  -1 ]
                                   [ 26  65  28 ] [  1  80  30 ] [  0  -1  -1 ]
                                   [ 35  35  30 ] [  3  35  28 ] [  1  36  28 ]
                                   [ 52  18  28 ] [  2  38  30 ] [  0  -1  -1 ] ]
        [ (67)  155  17  8  20805  [ 26  84  16 ] [  0  -1  -1 ] [  0  -1  -1 ]
                                   [ 26  70  30 ] [  0  -1  -1 ] [  0  -1  -1 ]
                                   [ 45  31  26 ] [  1   9  26 ] [  0  -1  -1 ]
                                   [ 52  20  30 ] [  0  -1  -1 ] [  0  -1  -1 ] ]
        [ (68)  157  17  8  21389  [ 16 126  24 ] [  1 114  22 ] [  1 115  22 ]
                                   [ 23  70  30 ] [  3  65  28 ] [  1  66  28 ]
                                   [ 40  35  30 ] [  1  43  30 ] [  0  -1  -1 ]
                                   [ 46  20  30 ] [  7  19  28 ] [  1  16  28 ] ]
        [ (69)  159  18  8  21993  [ 19 116  22 ] [  1 105  22 ] [  0  -1  -1 ]
                                   [ 20  70  30 ] [  7  66  28 ] [  1  63  28 ]
                                   [ 40  35  30 ] [  1  42  32 ] [  1  43  32 ]
                                   [ 54  20  30 ] [  1  19  30 ] [  0  -1  -1 ] ]
        [ (70)  161  18  8  22593  [ 17 126  24 ] [  2 115  22 ] [  0  -1  -1 ]
                                   [ 24  70  30 ] [  4  74  32 ] [  0  -1  -1 ]
                                   [ 48  31  26 ] [  2  18  26 ] [  0  -1  -1 ]
                                   [ 54  19  28 ] [  6  15  26 ] [  1  14  26 ] ]
        [ (71)  163  18  8  23201  [ 29  84  16 ] [  0  -1  -1 ] [  0  -1  -1 ]
                                   [ 29  70  30 ] [  0  -1  -1 ] [  0  -1  -1 ]
                                   [  6  34  30 ] [  3  36  30 ] [ 38  33  28 ]
                                   [ 58  20  30 ] [  0  -1  -1 ] [  0  -1  -1 ] ]
        [ (72)  165  18  8  23817  [ 16 147  28 ] [  1 149  28 ] [  0  -1  -1 ]
                                   [ 31  66  28 ] [  1  37  26 ] [  0  -1  -1 ]
                                   [ 48  33  28 ] [  1  23  26 ] [  0  -1  -1 ]
                                   [ 53  20  30 ] [  6  19  28 ] [  1  17  28 ] ]
        [ (73)  167  19  8  24453  [ 20 115  22 ] [  2 134  24 ] [  0  -1  -1 ]
                                   [ 29  66  28 ] [  2  56  26 ] [  2  57  26 ]
                                   [ 45  36  30 ] [  2  15  28 ] [  0  -1  -1 ]
                                   [ 59  20  30 ] [  2  21  32 ] [  0  -1  -1 ] ]
        [ (74)  169  19  8  25085  [ 17 147  28 ] [  1 134  26 ] [  0  -1  -1 ]
                                   [ 26  70  30 ] [  5  75  32 ] [  0  -1  -1 ]
                                   [ 47  35  30 ] [  1  48  32 ] [  0  -1  -1 ]
                                   [ 64  18  28 ] [  2  33  30 ] [  1  35  30 ] ]
        [ (75)  171  17  9  25373  [ 22 115  22 ] [  1 133  24 ] [  0  -1  -1 ]
                                   [ 33  65  28 ] [  1  74  28 ] [  0  -1  -1 ]
                                   [ 43  36  30 ] [  5  27  28 ] [  1  30  28 ]
                                   [ 57  20  30 ] [  5  21  32 ] [  1  24  32 ] ]
        [ (76)  173  17  9  26021  [ 18 136  26 ] [  2 142  26 ] [  0  -1  -1 ]
                                   [ 33  66  28 ] [  2  49  26 ] [  0  -1  -1 ]
                                   [ 48  35  30 ] [  2  38  28 ] [  0  -1  -1 ]
                                   [ 64  20  30 ] [  1  20  32 ] [  0  -1  -1 ] ]
        [ (77)  175  17  9  26677  [ 19 126  24 ] [  2 135  26 ] [  1 136  26 ]
                                   [ 32  66  28 ] [  2  55  26 ] [  2  56  26 ]
                                   [ 49  36  30 ] [  2  18  32 ] [  0  -1  -1 ]
                                   [ 65  18  28 ] [  5  27  30 ] [  1  29  30 ] ]
        [ (78)  177  18  9  27335  [ 20 137  26 ] [  1 130  26 ] [  0  -1  -1 ]
                                   [ 30  75  32 ] [  2  71  32 ] [  0  -1  -1 ]
                                   [ 46  35  30 ] [  6  39  32 ] [  0  -1  -1 ]
                                   [  3  12  30 ] [ 70  19  28 ] [  0  -1  -1 ] ]
        [ (79)  179  18  9  28007  [ 20 147  28 ] [  0  -1  -1 ] [  0  -1  -1 ]
                                   [ 35  70  30 ] [  0  -1  -1 ] [  0  -1  -1 ]
                                   [ 49  35  30 ] [  5  35  28 ] [  0  -1  -1 ]
                                   [ 70  20  30 ] [  0  -1  -1 ] [  0  -1  -1 ] ]
        [ (80)  181  18  9  28687  [ 21 136  26 ] [  1 155  28 ] [  0  -1  -1 ]
                                   [ 34  70  30 ] [  1  64  28 ] [  1  65  28 ]
                                   [ 54  35  30 ] [  1  45  30 ] [  0  -1  -1 ]
                                   [ 68  20  30 ] [  3  18  28 ] [  1  19  28 ] ]
        [ (81)  183  18  9  29375  [ 19 126  24 ] [  5 115  22 ] [  1 114  22 ]
                                   [ 33  70  30 ] [  3  65  28 ] [  1  64  28 ]
                                   [ 52  35  30 ] [  3  41  32 ] [  1  40  32 ]
                                   [ 67  20  30 ] [  5  21  32 ] [  1  24  32 ] ]
        [ (82)  185  18  9  30071  [  2 150  28 ] [ 21 136  26 ] [  0  -1  -1 ]
                                   [ 32  70  30 ] [  6  65  28 ] [  0  -1  -1 ]
                                   [ 52  38  32 ] [  2  27  32 ] [  0  -1  -1 ]
                                   [ 73  20  30 ] [  2  22  32 ] [  0  -1  -1 ] ]
        [ (83)  187  17 10  30387  [ 21 126  24 ] [  4 136  26 ] [  0  -1  -1 ]
                                   [ 30  74  32 ] [  6  73  30 ] [  0  -1  -1 ]
                                   [ 54  35  30 ] [  4  40  32 ] [  0  -1  -1 ]
                                   [ 75  20  30 ] [  1  20  28 ] [  0  -1  -1 ] ]
        [ (84)  189  17 10  31091  [ 30 105  20 ] [  1 114  22 ] [  0  -1  -1 ]
                                   [  3  45  22 ] [ 55  47  20 ] [  0  -1  -1 ]
                                   [  2  26  26 ] [ 62  33  28 ] [  0  -1  -1 ]
                                   [ 79  18  28 ] [  4  33  30 ] [  0  -1  -1 ] ]
    ] def
} ctxdef

    /eclval eclevel 1 get 49 sub def
    metrics {
        /m exch def
        /vers m 0 get def                             % Version of symbol
        /size m 1 get def                             % Length of side
        /alnk m 2 get def                             % Regular alignment pattern length
        /alnn m 3 get def                             % Number of alignment patterns
        /alnr size alnk alnn mul sub def              % Remainder alignment pattern length
        /nmod m 4 get def                             % Number of modules
        /ncws nmod 8 idiv def                         % Total number of codewords
        /rbit nmod 8 mod def                          % Number of remainder bits
        /ecbs m 5 eclval 3 mul add 3 getinterval def  % Error correction blocks
        /ecws 0 ecbs {dup 0 get exch 2 get mul add} forall def  % Number of error correction codewords
        /dcws ncws ecws sub def                       % Number of data codewords
        /dmod dcws 8 mul def                          % Number of data modules
        /okay true def
        version (unset) ne version vers ne and {/okay false def} if  % The version must match that supplied
        bits length dmod gt {/okay false def} if      % Bitstream must fit into data modules
        okay {exit} if
    } forall

    okay not {
        /bwipp.hanxinNoValidSymbol (Maximum length exceeded or invalid content) //raiseerror exec
    } if

    /version vers def
    /msgbits bits def
    /e1nb   ecbs 0 get 0 get def  /e2nb   ecbs 1 get 0 get def  /e3nb   ecbs 2 get 0 get def
    /e1dcws ecbs 0 get 1 get def  /e2dcws ecbs 1 get 1 get def  /e3dcws ecbs 2 get 1 get def
    /e1ecws ecbs 0 get 2 get def  /e2ecws ecbs 1 get 2 get def  /e3ecws ecbs 2 get 2 get def

    % Expand the message bits by adding padding as necessary
    /pad dmod string def
    0 1 pad length 1 sub {pad exch 48 put} for
    pad 0 msgbits putinterval

    % Evaluate the padded message into codewords
    /cws dcws array def
    0 1 cws length 1 sub {
        /c exch def
        /cwb pad c 8 mul 8 getinterval def
        /cw 0 def
        0 1 7 {
            /i exch def
            /cw cw 2 8 i sub 1 sub exp cvi cwb i get 48 sub mul add def
        } for
        cws c cw put
    } for

    /rscodes {

        /rspm exch def
        /rsgf exch def
        /rsnc exch def
        /rscws exch def

        % Calculate the log and anti-log tables
        /rsalog [ 1 rsgf 1 sub { dup 2 mul dup rsgf ge {rspm xor} if } repeat ] def
        /rslog rsgf array def
        1 1 rsgf 1 sub {dup rsalog exch get exch rslog 3 1 roll put} for

        % Function to calculate the product in the field
        /rsprod {
            2 copy 0 ne exch 0 ne and {
                rslog exch get exch rslog exch get add rsgf 1 sub mod rsalog exch get
            } {
                pop pop 0
            } ifelse
        } def

        % Generate the coefficients
        /coeffs [ 1 rsnc {0} repeat ] def
        1 1 rsnc {
            /i exch def
            coeffs i coeffs i 1 sub get put
            i 1 sub -1 1 {
                /j exch def
                coeffs j coeffs j 1 sub get coeffs j get rsalog i get rsprod xor put
            } for
            coeffs 0 coeffs 0 get rsalog i get rsprod put
        } for

        % Extend the input with the error correction values
        /nd rscws length def
        /rscws [ rscws aload pop rsnc {0} repeat 0 ] def
        0 1 nd 1 sub {
            /k exch rscws exch get rscws nd get xor def
            0 1 rsnc 1 sub {
                /j exch def
                rscws nd j add rscws nd j add 1 add get k coeffs rsnc j sub 1 sub get rsprod xor put
            } for
        } for

        % Return all but the last codeword
        rscws 0 rscws length 1 sub getinterval

    } def

    % Divide codewords into two groups of blocks and calculate the error correction codewords
    /dcwsb e1nb e2nb add e3nb add array def
    /ecwsb dcwsb length array def
    /in 0 def  /out 0 def
    e1nb {
        cws in e1dcws getinterval e1ecws 256 355 rscodes
        dup 0 e1dcws getinterval dcwsb exch out exch put
        e1dcws e1ecws getinterval ecwsb exch out exch put
        /in in e1dcws add def  /out out 1 add def
    } repeat
    e2nb {
        cws in e2dcws getinterval e2ecws 256 355 rscodes
        dup 0 e2dcws getinterval dcwsb exch out exch put
        e2dcws e2ecws getinterval ecwsb exch out exch put
        /in in e2dcws add def  /out out 1 add def
    } repeat
    e3nb {
        cws in e3dcws getinterval e3ecws 256 355 rscodes
        dup 0 e3dcws getinterval dcwsb exch out exch put
        e3dcws e3ecws getinterval ecwsb exch out exch put
        /in in e3dcws add def  /out out 1 add def
    } repeat

    % Reassemble the codewords
    /cws ncws array def
    /cw 0 def
    0 1 dcwsb length 1 sub {
        /i exch def
        dcwsb i get dup cws exch cw exch putinterval length cw add /cw exch def
        ecwsb i get dup cws exch cw exch putinterval length cw add /cw exch def
    } for

    % Split codewords into groups of 13 and concatenate
    /cws [
        0 1 ncws 1 sub 12 2 copy gt {exch} if pop {
            13 ncws 1 sub { dup ncws lt {cws exch get} {pop} ifelse } for
        } for
    ] def

    % Extend codewords by one if there are remainder bits
    rbit 0 gt {
        /pad cws length 1 add array def
        pad 0 cws putinterval
        pad pad length 1 sub 0 put
        /cws pad def
    } if

    options /debugcws known { /bwipp.debugcws cws //raiseerror exec } if

    % Create the bitmap
    /pixs [ size size mul {-1} repeat ] def
    /qmv {size mul add} def

    % Alignment patterns
    alnn 0 ne {
        /trmv {size mul size add 1 sub exch sub} def
        /aplot {
            3 1 roll 3 copy exch trmv pixs exch 3 -1 roll put
            trmv pixs exch 3 -1 roll put
        } def
        /i 0 def /stag 0 def {
            i size ge {exit} if
            0 1 size 1 sub {
                /j exch def
                j alnr add size lt {
                    j alnk idiv stag add 2 mod 0 eq   % Staggered groups of k modules
                    i 0 eq j alnk lt and not and      % Keep clear at top right
                    j alnk mod 0 eq or                % Complete regular-spaced grid
                } {
                    alnn stag add 2 mod 0 eq          % Bottom right remainder
                } ifelse
                {
                    j i 1 aplot
                    j 1 add i 1 add 2 copy size lt exch size lt and {0 aplot} {pop pop} ifelse
                } if
            } for
            i alnr add size eq {
                /i i alnr add 1 sub def
            } {
                /i i alnk add def
            } ifelse
            /stag 1 stag sub def
        } loop
        alnk alnk size 2 sub {
            /i exch def
            i alnk idiv 2 mod 0 ne {
                pixs 0 i 1 sub trmv 0 put
                pixs 0 i 1 add trmv 0 put
                pixs 1 i 1 sub trmv 0 put
                pixs 1 i trmv 0 put
                pixs 1 i 1 add trmv 0 put
                pixs i 1 sub 0 trmv 0 put
                pixs i 1 add 0 trmv 0 put
                pixs i 1 sub 1 trmv 0 put
                pixs i 1 trmv 0 put
                pixs i 1 add 1 trmv 0 put
            } if
            pixs size 1 sub i 1 sub trmv get 1 ne {
                pixs size 1 sub i 1 sub trmv 0 put
                pixs size 2 sub i 1 sub trmv 0 put
                pixs size 2 sub i trmv 0 put
                pixs size 2 sub i 1 add trmv 0 put
                pixs size 1 sub i 1 add trmv 0 put
                pixs i 1 sub size 1 sub trmv 0 put
                pixs i 1 sub size 2 sub trmv 0 put
                pixs i size 2 sub trmv 0 put
                pixs i 1 add size 2 sub trmv 0 put
                pixs i 1 add size 1 sub trmv 0 put
            } if
        } for
    } if

    % Finder patterns
{
    /fpat [
        [ 1 1 1 1 1 1 1 0 ]
        [ 1 0 0 0 0 0 0 0 ]
        [ 1 0 1 1 1 1 1 0 ]
        [ 1 0 1 0 0 0 0 0 ]
        [ 1 0 1 0 1 1 1 0 ]
        [ 1 0 1 0 1 1 1 0 ]
        [ 1 0 1 0 1 1 1 0 ]
        [ 0 0 0 0 0 0 0 0 ]
    ] def
    /fpat2 [
        [ 1 1 1 0 1 0 1 0 ]
        [ 1 1 1 0 1 0 1 0 ]
        [ 1 1 1 0 1 0 1 0 ]
        [ 0 0 0 0 1 0 1 0 ]
        [ 1 1 1 1 1 0 1 0 ]
        [ 0 0 0 0 0 0 1 0 ]
        [ 1 1 1 1 1 1 1 0 ]
        [ 0 0 0 0 0 0 0 0 ]
    ] def
} ctxdef
    0 1 fpat length 1 sub {
        /y exch def
        0 1 fpat 0 get length 1 sub {
            /x exch def
            /fpb fpat y get x get def
            /fpb2 fpat2 y get x get def
            pixs x y qmv fpb put
            pixs size x sub 1 sub y qmv fpb put
            pixs size x sub 1 sub size y sub 1 sub qmv fpb put
            pixs x size y sub 1 sub qmv fpb2 put
        } for
    } for

    % Format information modules
    /functionmap [
        [ [ 0 8 ] [ size 1 sub size 9 sub ] ]  [ [ 1 8 ] [ size 2 sub size 9 sub ] ]
        [ [ 2 8 ] [ size 3 sub size 9 sub ] ]  [ [ 3 8 ] [ size 4 sub size 9 sub ] ]
        [ [ 4 8 ] [ size 5 sub size 9 sub ] ]  [ [ 5 8 ] [ size 6 sub size 9 sub ] ]
        [ [ 6 8 ] [ size 7 sub size 9 sub ] ]  [ [ 7 8 ] [ size 8 sub size 9 sub ] ]
        [ [ 8 8 ] [ size 9 sub size 9 sub ] ]
        [ [ 8 7 ] [ size 9 sub size 8 sub ] ]  [ [ 8 6 ] [ size 9 sub size 7 sub ] ]
        [ [ 8 5 ] [ size 9 sub size 6 sub ] ]  [ [ 8 4 ] [ size 9 sub size 5 sub ] ]
        [ [ 8 3 ] [ size 9 sub size 4 sub ] ]  [ [ 8 2 ] [ size 9 sub size 3 sub ] ]
        [ [ 8 1 ] [ size 9 sub size 2 sub ] ]  [ [ 8 0 ] [ size 9 sub size 1 sub ] ]
        [ [ size 9 sub 0 ] [ 8 size 1 sub ] ]  [ [ size 9 sub 1 ] [ 8 size 2 sub ] ]
        [ [ size 9 sub 2 ] [ 8 size 3 sub ] ]  [ [ size 9 sub 3 ] [ 8 size 4 sub ] ]
        [ [ size 9 sub 4 ] [ 8 size 5 sub ] ]  [ [ size 9 sub 5 ] [ 8 size 6 sub ] ]
        [ [ size 9 sub 6 ] [ 8 size 7 sub ] ]  [ [ size 9 sub 7 ] [ 8 size 8 sub ] ]
        [ [ size 9 sub 8 ] [ 8 size 9 sub ] ]
        [ [ size 8 sub 8 ] [ 7 size 9 sub ] ]  [ [ size 7 sub 8 ] [ 6 size 9 sub ] ]
        [ [ size 6 sub 8 ] [ 5 size 9 sub ] ]  [ [ size 5 sub 8 ] [ 4 size 9 sub ] ]
        [ [ size 4 sub 8 ] [ 3 size 9 sub ] ]  [ [ size 3 sub 8 ] [ 2 size 9 sub ] ]
        [ [ size 2 sub 8 ] [ 1 size 9 sub ] ]  [ [ size 1 sub 8 ] [ 0 size 9 sub ] ]
    ] def
    functionmap {
        { aload pop qmv pixs exch 0 put } forall
    } forall

    /maskfuncs [
        {pop pop 1}
        {add 2 mod}
        {1 index add 3 mod exch 3 mod add 2 mod}
        {2 copy mod 3 1 roll 2 copy exch mod 3 1 roll 3 mod exch 3 mod
         add add add 2 mod}
    ] def
    mask -1 ne {  % User specifies a mask
        /maskfuncs [maskfuncs mask 1 sub get] def
        /bestmaskval mask 1 sub def
    } if
    /masks maskfuncs length array def
    0 1 masks length 1 sub {
        /m exch def
        /mask size size mul array def
        0 1 size 1 sub {
            /j exch def
            0 1 size 1 sub {
                /i exch def
                i 1 add j 1 add maskfuncs m get exec 0 eq
                pixs i j qmv get -1 eq and {1} {0} ifelse
                mask i j qmv 3 -1 roll put
            } for
        } for
        masks m mask put
    } for

    % Walk the symbol placing the bitstream
    /posx 0 def
    /posy 0 def
    /num 0 def
    { % loop
        posy size eq {exit} if
        pixs posx posy qmv get -1 eq {
            cws num 8 idiv get 7 num 8 mod sub neg bitshift 1 and
            pixs posx posy qmv 3 -1 roll put
            /num num 1 add def
        } if
        /posx posx 1 add def
        posx size eq {/posx 0 def /posy posy 1 add def} if
    } loop

    % Evaluate runlength encoded rows or columns in full symbols
    /evalfulln1n3 {
        /scrle exch def
        % Detect runs of 3 or more like modules
        /scr1 0 scrle { dup 3 ge {4 mul add dup} if pop } forall def
        /scr3 0 def
        % Detect 1:1:1:1:3 ratio next to 3 modules of whitespace
        5 2 scrle length 1 sub {  % Scan odd (dark) runs within bounds
            /j exch def
            scrle j get 3 mod 0 eq {  % Multiple of 3 black modules
                /fact scrle j get 3 idiv def
                scrle j 4 sub 4 getinterval {fact eq} forall and and and {
                    j 5 eq j 2 add scrle length ge or {  % At either extent of run
                        /scr3 scr3 50 add def
                    } {  % Bounded by dark modules
                        scrle j 5 sub get 3 ge scrle j 1 add get 3 ge or {
                            /scr3 scr3 50 add def
                        } if
                    } ifelse
                } if
            } if
        } for
        % Detect 3:1:1:1:1 ratio next to 3 modules of whitespace
        1 2 scrle length 5 sub {  % Scan odd (dark) runs within bounds
            /j exch def
            scrle j get 3 mod 0 eq {  % Multiple of 3 black modules
                /fact scrle j get 3 idiv def
                scrle j 1 add 4 getinterval {fact eq} forall and and and {
                    j 1 eq j 6 add scrle length ge or {  % At either extent of run
                        /scr3 scr3 50 add def
                    } {  % Bounded by dark modules
                        scrle j 1 sub get 3 ge scrle j 5 add get 3 ge or {
                            /scr3 scr3 50 add def
                        } if
                    } ifelse
                } if
            } if
        } for
        scr1 scr3
    } def

    % Evaluation algorithm
    /evalfull {
        /sym exch def

        /n1 0 def /n3 0 def
        /rle size 1 add array def
        /lastpairs size array def
        /thispairs size array def
        /sizeadd1 size 1 add def
        0 1 size 1 sub {
            /i exch def

            % Runlength encode (light, dark, light, ...) and evaluate each column
            mark 0 0
            i size dup dup mul 1 sub {
                sym exch get exch 1 index eq {exch 1 add exch} {1 exch} ifelse
            } for
            pop
            rle 0 counttomark 2 sub getinterval astore
            evalfulln1n3 n3 add /n3 exch def n1 add /n1 exch def
            pop

            % Runlength encode (light, dark, light, ...) and evaluate each row
            /symrow sym i size mul size getinterval def
            mark 0 0
            symrow {
                exch 1 index eq {exch 1 add exch} {1 exch} ifelse
            } forall
            pop
            rle 0 counttomark 2 sub getinterval astore
            evalfulln1n3 n3 add /n3 exch def n1 add /n1 exch def
            pop

        } for

        n1 n3 add
    } def

    % Evaluate the masked symbols to find the most suitable
    /bestscore 999999999 def
    0 1 masks length 1 sub {
        /m exch def
        /masksym size size mul array def
        0 1 size size mul 1 sub {
            /i exch def
            masksym i pixs i get masks m get i get xor put
        } for
        masks length 1 ne {
            masksym evalfull /score exch def
            score bestscore lt {
                /bestsym masksym def
                /bestmaskval m def
                /bestscore score def
            } if
        } {
            /bestsym masksym def
        } ifelse
    } for
    /pixs bestsym def

    % Add the function information
    /funval size 21 sub 2 idiv 20 add 4 mul eclval add 4 mul bestmaskval add def
    [ funval 16#0F00 and -8 bitshift
      funval 16#00F0 and -4 bitshift
      funval 16#000F and ]
    4 16 19 rscodes /funvals exch def
    /funbits [
        funvals {
            4 tobin {48 sub} forall
        } forall
        0 1 0 1 0 1
    ] def
    0 1 functionmap length 1 sub {
        /i exch def
        functionmap i get {
            pixs exch aload pop qmv funbits i get put
        } forall
    } for

    % Return the arguments
    <<
    /ren /renmatrix
    /pixs pixs
    /pixx size
    /pixy size
    /height size 2 mul 72 div
    /width size 2 mul 72 div
    /borderleft 3.0
    /borderright 3.0
    /bordertop 3.0
    /borderbottom 3.0
    /opt options
    >>

    dontdraw not //renmatrix if

    //unloadctx exec

    end

}
[/barcode] {null def} forall
bind def
/hanxin dup load /uk.co.terryburton.bwipp defineresource pop
end
/setpacking where {pop setpacking} if
% --END ENCODER hanxin--
