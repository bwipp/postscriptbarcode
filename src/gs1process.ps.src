% Barcode Writer in Pure PostScript
% https://bwipp.terryburton.co.uk
%
% Copyright (c) 2004-2024 Terry Burton
%
% $Id$
%
% Permission is hereby granted, free of charge, to any
% person obtaining a copy of this software and associated
% documentation files (the "Software"), to deal in the
% Software without restriction, including without
% limitation the rights to use, copy, modify, merge,
% publish, distribute, sublicense, and/or sell copies of
% the Software, and to permit persons to whom the Software
% is furnished to do so, subject to the following
% conditions:
%
% The above copyright notice and this permission notice
% shall be included in all copies or substantial portions
% of the Software.
%
% THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
% KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO
% THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
% PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
% THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
% DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
% CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
% CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
% IN THE SOFTWARE.

% --BEGIN RESOURCE gs1process--
% --REQUIRES preamble loadctx unloadctx parseinput raiseerror--
/setpacking where {pop currentpacking true setpacking} if
10 dict
dup /loadctx dup /uk.co.terryburton.bwipp findresource put
dup /unloadctx dup /uk.co.terryburton.bwipp findresource put
dup /parseinput dup /uk.co.terryburton.bwipp findresource put
dup /raiseerror dup /uk.co.terryburton.bwipp findresource put
begin
/gs1process {

    20 dict begin

    /gs1process //loadctx exec

{
    % Extracted from the GS1 Syntax Dictionary
    /gs1syntax <<

        <<
            /parts [
                << /cset /N  /min 18  /max 18  /opt false  /linters [ /lintcsum /lintkey ] >>
            ]
            /dlpkey [ ]
        >>
        (00) exch dup
        pop

        <<
            /parts [
                << /cset /N  /min 14  /max 14  /opt false  /linters [ /lintcsum /lintkey ] >>
            ]
            /ex     [ (255) (37) ]
            /dlpkey [ [ (22) (10) (21) ] [ (235) ] ]
        >>
        (01) exch dup
        pop

        <<
            /parts [
                << /cset /N  /min 14  /max 14  /opt false  /linters [ /lintcsum /lintkey ] >>
            ]
            /ex     [ (01) (03) ]
            /req    [ [ [ (37) ] ] ]
        >>
        (02) exch dup
        pop

        <<
            /parts [
                << /cset /N  /min 14  /max 14  /opt false  /linters [ /lintcsum /lintkey ] >>
            ]
            /ex     [ (01) (02) (37) ]
            /dlattr false
        >>
        (03) exch dup
        pop

        <<
            /parts [
                << /cset /X  /min  1  /max 20  /opt false  /linters [] >>
            ]
            /req    [ [ [ (01) ] [ (02) ] [ (03) ] [ (8006) ] [ (8026) ] ] ]
        >>
        (10) exch dup
        pop

        <<
            /parts [
                << /cset /N  /min  6  /max  6  /opt false  /linters [ /lintyymmd0 ] >>
            ]
            /req    [ [ [ (01) ] [ (02) ] [ (8006) ] [ (8026) ] ] ]
        >>
        (11) exch dup
        pop

        <<
            /parts [
                << /cset /N  /min  6  /max  6  /opt false  /linters [ /lintyymmd0 ] >>
            ]
            /req    [ [ [ (8020) ] ] ]
        >>
        (12) exch dup
        pop

        <<
            /parts [
                << /cset /N  /min  6  /max  6  /opt false  /linters [ /lintyymmd0 ] >>
            ]
            /req    [ [ [ (01) ] [ (02) ] [ (8006) ] [ (8026) ] ] ]
        >>
        (13) exch dup
        (15) exch dup
        (16) exch dup
        pop

        <<
            /parts [
                << /cset /N  /min  6  /max  6  /opt false  /linters [ /lintyymmd0 ] >>
            ]
            /req    [ [ [ (01) ] [ (02) ] [ (255) ] [ (8006) ] [ (8026) ] ] ]
        >>
        (17) exch dup
        pop

        <<
            /parts [
                << /cset /N  /min  2  /max  2  /opt false  /linters [] >>
            ]
            /req    [ [ [ (01) ] [ (02) ] [ (8006) ] [ (8026) ] ] ]
        >>
        (20) exch dup
        pop

        <<
            /parts [
                << /cset /X  /min  1  /max 20  /opt false  /linters [] >>
            ]
            /ex     [ (235) ]
            /req    [ [ [ (01) ] [ (03) ] [ (8006) ] ] ]
            /dlattr false
        >>
        (21) exch dup
        pop

        <<
            /parts [
                << /cset /X  /min  1  /max 20  /opt false  /linters [] >>
            ]
            /req    [ [ [ (01) ] ] ]
            /dlattr false
        >>
        (22) exch dup
        pop

        <<
            /parts [
                << /cset /X  /min  1  /max 28  /opt false  /linters [] >>
            ]
            /req    [ [ [ (01) ] ] ]
            /dlattr false
        >>
        (235) exch dup
        pop

        <<
            /parts [
                << /cset /X  /min  1  /max 30  /opt false  /linters [] >>
            ]
            /req    [ [ [ (01) ] [ (02) ] [ (8006) ] [ (8026) ] ] ]
        >>
        (240) exch dup
        (241) exch dup
        pop

        <<
            /parts [
                << /cset /N  /min  1  /max  6  /opt false  /linters [] >>
            ]
            /req    [ [ [ (01) ] [ (02) ] [ (03) ] [ (8006) ] [ (8026) ] ] ]
        >>
        (242) exch dup
        pop

        <<
            /parts [
                << /cset /X  /min  1  /max 20  /opt false  /linters [] >>
            ]
            /req    [ [ [ (01) ] ] ]
        >>
        (243) exch dup
        pop

        <<
            /parts [
                << /cset /X  /min  1  /max 30  /opt false  /linters [] >>
            ]
            /req    [ [ [ (01) ] [ (8006) ] ] [ [ (21) ] ] ]
        >>
        (250) exch dup
        pop

        <<
            /parts [
                << /cset /X  /min  1  /max 30  /opt false  /linters [] >>
            ]
            /req    [ [ [ (01) ] [ (8006) ] ] ]
        >>
        (251) exch dup
        pop

        <<
            /parts [
                << /cset /N  /min 13  /max 13  /opt false  /linters [ /lintcsum /lintkey ] >>
                << /cset /X  /min  1  /max 17  /opt true   /linters [] >>
            ]
            /dlpkey [ ]
        >>
        (253) exch dup
        pop

        <<
            /parts [
                << /cset /X  /min  1  /max 20  /opt false  /linters [] >>
            ]
            /req    [ [ [ (414) ] ] ]
            /dlattr false
        >>
        (254) exch dup
        pop

        <<
            /parts [
                << /cset /N  /min 13  /max 13  /opt false  /linters [ /lintcsum /lintkey ] >>
                << /cset /N  /min  1  /max 12  /opt true   /linters [] >>
            ]
            /ex     [ (01) (02) (415) (8006) (8020) (8026) ]
            /dlpkey [ ]
        >>
        (255) exch dup
        pop

        <<
            /parts [
                << /cset /N  /min  1  /max  8  /opt false  /linters [] >>
            ]
            /req    [ [ [ (01) ] [ (02) ] ] ]
        >>
        (30) exch dup
        pop

        <<
            /parts [
                << /cset /N  /min  6  /max  6  /opt false  /linters [] >>
            ]
            /ex     [ (310n) ]
            /req    [ [ [ (01) ] [ (02) ] ] ]
        >>
        (3100) exch dup
        (3101) exch dup
        (3102) exch dup
        (3103) exch dup
        (3104) exch dup
        (3105) exch dup
        pop

        <<
            /parts [
                << /cset /N  /min  6  /max  6  /opt false  /linters [] >>
            ]
            /ex     [ (311n) ]
            /req    [ [ [ (01) ] [ (02) ] ] ]
        >>
        (3110) exch dup
        (3111) exch dup
        (3112) exch dup
        (3113) exch dup
        (3114) exch dup
        (3115) exch dup
        pop

        <<
            /parts [
                << /cset /N  /min  6  /max  6  /opt false  /linters [] >>
            ]
            /ex     [ (312n) ]
            /req    [ [ [ (01) ] [ (02) ] ] ]
        >>
        (3120) exch dup
        (3121) exch dup
        (3122) exch dup
        (3123) exch dup
        (3124) exch dup
        (3125) exch dup
        pop

        <<
            /parts [
                << /cset /N  /min  6  /max  6  /opt false  /linters [] >>
            ]
            /ex     [ (313n) ]
            /req    [ [ [ (01) ] [ (02) ] ] ]
        >>
        (3130) exch dup
        (3131) exch dup
        (3132) exch dup
        (3133) exch dup
        (3134) exch dup
        (3135) exch dup
        pop

        <<
            /parts [
                << /cset /N  /min  6  /max  6  /opt false  /linters [] >>
            ]
            /ex     [ (314n) ]
            /req    [ [ [ (01) ] [ (02) ] ] ]
        >>
        (3140) exch dup
        (3141) exch dup
        (3142) exch dup
        (3143) exch dup
        (3144) exch dup
        (3145) exch dup
        pop

        <<
            /parts [
                << /cset /N  /min  6  /max  6  /opt false  /linters [] >>
            ]
            /ex     [ (315n) ]
            /req    [ [ [ (01) ] [ (02) ] ] ]
        >>
        (3150) exch dup
        (3151) exch dup
        (3152) exch dup
        (3153) exch dup
        (3154) exch dup
        (3155) exch dup
        pop

        <<
            /parts [
                << /cset /N  /min  6  /max  6  /opt false  /linters [] >>
            ]
            /ex     [ (316n) ]
            /req    [ [ [ (01) ] [ (02) ] ] ]
        >>
        (3160) exch dup
        (3161) exch dup
        (3162) exch dup
        (3163) exch dup
        (3164) exch dup
        (3165) exch dup
        pop

        <<
            /parts [
                << /cset /N  /min  6  /max  6  /opt false  /linters [] >>
            ]
            /ex     [ (320n) ]
            /req    [ [ [ (01) ] [ (02) ] ] ]
        >>
        (3200) exch dup
        (3201) exch dup
        (3202) exch dup
        (3203) exch dup
        (3204) exch dup
        (3205) exch dup
        pop

        <<
            /parts [
                << /cset /N  /min  6  /max  6  /opt false  /linters [] >>
            ]
            /ex     [ (321n) ]
            /req    [ [ [ (01) ] [ (02) ] ] ]
        >>
        (3210) exch dup
        (3211) exch dup
        (3212) exch dup
        (3213) exch dup
        (3214) exch dup
        (3215) exch dup
        pop

        <<
            /parts [
                << /cset /N  /min  6  /max  6  /opt false  /linters [] >>
            ]
            /ex     [ (322n) ]
            /req    [ [ [ (01) ] [ (02) ] ] ]
        >>
        (3220) exch dup
        (3221) exch dup
        (3222) exch dup
        (3223) exch dup
        (3224) exch dup
        (3225) exch dup
        pop

        <<
            /parts [
                << /cset /N  /min  6  /max  6  /opt false  /linters [] >>
            ]
            /ex     [ (323n) ]
            /req    [ [ [ (01) ] [ (02) ] ] ]
        >>
        (3230) exch dup
        (3231) exch dup
        (3232) exch dup
        (3233) exch dup
        (3234) exch dup
        (3235) exch dup
        pop

        <<
            /parts [
                << /cset /N  /min  6  /max  6  /opt false  /linters [] >>
            ]
            /ex     [ (324n) ]
            /req    [ [ [ (01) ] [ (02) ] ] ]
        >>
        (3240) exch dup
        (3241) exch dup
        (3242) exch dup
        (3243) exch dup
        (3244) exch dup
        (3245) exch dup
        pop

        <<
            /parts [
                << /cset /N  /min  6  /max  6  /opt false  /linters [] >>
            ]
            /ex     [ (325n) ]
            /req    [ [ [ (01) ] [ (02) ] ] ]
        >>
        (3250) exch dup
        (3251) exch dup
        (3252) exch dup
        (3253) exch dup
        (3254) exch dup
        (3255) exch dup
        pop

        <<
            /parts [
                << /cset /N  /min  6  /max  6  /opt false  /linters [] >>
            ]
            /ex     [ (326n) ]
            /req    [ [ [ (01) ] [ (02) ] ] ]
        >>
        (3260) exch dup
        (3261) exch dup
        (3262) exch dup
        (3263) exch dup
        (3264) exch dup
        (3265) exch dup
        pop

        <<
            /parts [
                << /cset /N  /min  6  /max  6  /opt false  /linters [] >>
            ]
            /ex     [ (327n) ]
            /req    [ [ [ (01) ] [ (02) ] ] ]
        >>
        (3270) exch dup
        (3271) exch dup
        (3272) exch dup
        (3273) exch dup
        (3274) exch dup
        (3275) exch dup
        pop

        <<
            /parts [
                << /cset /N  /min  6  /max  6  /opt false  /linters [] >>
            ]
            /ex     [ (328n) ]
            /req    [ [ [ (01) ] [ (02) ] ] ]
        >>
        (3280) exch dup
        (3281) exch dup
        (3282) exch dup
        (3283) exch dup
        (3284) exch dup
        (3285) exch dup
        pop

        <<
            /parts [
                << /cset /N  /min  6  /max  6  /opt false  /linters [] >>
            ]
            /ex     [ (329n) ]
            /req    [ [ [ (01) ] [ (02) ] ] ]
        >>
        (3290) exch dup
        (3291) exch dup
        (3292) exch dup
        (3293) exch dup
        (3294) exch dup
        (3295) exch dup
        pop

        <<
            /parts [
                << /cset /N  /min  6  /max  6  /opt false  /linters [] >>
            ]
            /ex     [ (330n) ]
            /req    [ [ [ (00) ] [ (01) ] ] ]
        >>
        (3300) exch dup
        (3301) exch dup
        (3302) exch dup
        (3303) exch dup
        (3304) exch dup
        (3305) exch dup
        pop

        <<
            /parts [
                << /cset /N  /min  6  /max  6  /opt false  /linters [] >>
            ]
            /ex     [ (331n) ]
            /req    [ [ [ (00) ] [ (01) ] ] ]
        >>
        (3310) exch dup
        (3311) exch dup
        (3312) exch dup
        (3313) exch dup
        (3314) exch dup
        (3315) exch dup
        pop

        <<
            /parts [
                << /cset /N  /min  6  /max  6  /opt false  /linters [] >>
            ]
            /ex     [ (332n) ]
            /req    [ [ [ (00) ] [ (01) ] ] ]
        >>
        (3320) exch dup
        (3321) exch dup
        (3322) exch dup
        (3323) exch dup
        (3324) exch dup
        (3325) exch dup
        pop

        <<
            /parts [
                << /cset /N  /min  6  /max  6  /opt false  /linters [] >>
            ]
            /ex     [ (333n) ]
            /req    [ [ [ (00) ] [ (01) ] ] ]
        >>
        (3330) exch dup
        (3331) exch dup
        (3332) exch dup
        (3333) exch dup
        (3334) exch dup
        (3335) exch dup
        pop

        <<
            /parts [
                << /cset /N  /min  6  /max  6  /opt false  /linters [] >>
            ]
            /ex     [ (334n) ]
            /req    [ [ [ (00) ] [ (01) ] ] ]
        >>
        (3340) exch dup
        (3341) exch dup
        (3342) exch dup
        (3343) exch dup
        (3344) exch dup
        (3345) exch dup
        pop

        <<
            /parts [
                << /cset /N  /min  6  /max  6  /opt false  /linters [] >>
            ]
            /ex     [ (335n) ]
            /req    [ [ [ (00) ] [ (01) ] ] ]
        >>
        (3350) exch dup
        (3351) exch dup
        (3352) exch dup
        (3353) exch dup
        (3354) exch dup
        (3355) exch dup
        pop

        <<
            /parts [
                << /cset /N  /min  6  /max  6  /opt false  /linters [] >>
            ]
            /ex     [ (336n) ]
            /req    [ [ [ (00) ] [ (01) ] ] ]
        >>
        (3360) exch dup
        (3361) exch dup
        (3362) exch dup
        (3363) exch dup
        (3364) exch dup
        (3365) exch dup
        pop

        <<
            /parts [
                << /cset /N  /min  6  /max  6  /opt false  /linters [] >>
            ]
            /ex     [ (337n) ]
            /req    [ [ [ (01) ] ] ]
        >>
        (3370) exch dup
        (3371) exch dup
        (3372) exch dup
        (3373) exch dup
        (3374) exch dup
        (3375) exch dup
        pop

        <<
            /parts [
                << /cset /N  /min  6  /max  6  /opt false  /linters [] >>
            ]
            /ex     [ (340n) ]
            /req    [ [ [ (00) ] [ (01) ] ] ]
        >>
        (3400) exch dup
        (3401) exch dup
        (3402) exch dup
        (3403) exch dup
        (3404) exch dup
        (3405) exch dup
        pop

        <<
            /parts [
                << /cset /N  /min  6  /max  6  /opt false  /linters [] >>
            ]
            /ex     [ (341n) ]
            /req    [ [ [ (00) ] [ (01) ] ] ]
        >>
        (3410) exch dup
        (3411) exch dup
        (3412) exch dup
        (3413) exch dup
        (3414) exch dup
        (3415) exch dup
        pop

        <<
            /parts [
                << /cset /N  /min  6  /max  6  /opt false  /linters [] >>
            ]
            /ex     [ (342n) ]
            /req    [ [ [ (00) ] [ (01) ] ] ]
        >>
        (3420) exch dup
        (3421) exch dup
        (3422) exch dup
        (3423) exch dup
        (3424) exch dup
        (3425) exch dup
        pop

        <<
            /parts [
                << /cset /N  /min  6  /max  6  /opt false  /linters [] >>
            ]
            /ex     [ (343n) ]
            /req    [ [ [ (00) ] [ (01) ] ] ]
        >>
        (3430) exch dup
        (3431) exch dup
        (3432) exch dup
        (3433) exch dup
        (3434) exch dup
        (3435) exch dup
        pop

        <<
            /parts [
                << /cset /N  /min  6  /max  6  /opt false  /linters [] >>
            ]
            /ex     [ (344n) ]
            /req    [ [ [ (00) ] [ (01) ] ] ]
        >>
        (3440) exch dup
        (3441) exch dup
        (3442) exch dup
        (3443) exch dup
        (3444) exch dup
        (3445) exch dup
        pop

        <<
            /parts [
                << /cset /N  /min  6  /max  6  /opt false  /linters [] >>
            ]
            /ex     [ (345n) ]
            /req    [ [ [ (00) ] [ (01) ] ] ]
        >>
        (3450) exch dup
        (3451) exch dup
        (3452) exch dup
        (3453) exch dup
        (3454) exch dup
        (3455) exch dup
        pop

        <<
            /parts [
                << /cset /N  /min  6  /max  6  /opt false  /linters [] >>
            ]
            /ex     [ (346n) ]
            /req    [ [ [ (00) ] [ (01) ] ] ]
        >>
        (3460) exch dup
        (3461) exch dup
        (3462) exch dup
        (3463) exch dup
        (3464) exch dup
        (3465) exch dup
        pop

        <<
            /parts [
                << /cset /N  /min  6  /max  6  /opt false  /linters [] >>
            ]
            /ex     [ (347n) ]
            /req    [ [ [ (00) ] [ (01) ] ] ]
        >>
        (3470) exch dup
        (3471) exch dup
        (3472) exch dup
        (3473) exch dup
        (3474) exch dup
        (3475) exch dup
        pop

        <<
            /parts [
                << /cset /N  /min  6  /max  6  /opt false  /linters [] >>
            ]
            /ex     [ (348n) ]
            /req    [ [ [ (00) ] [ (01) ] ] ]
        >>
        (3480) exch dup
        (3481) exch dup
        (3482) exch dup
        (3483) exch dup
        (3484) exch dup
        (3485) exch dup
        pop

        <<
            /parts [
                << /cset /N  /min  6  /max  6  /opt false  /linters [] >>
            ]
            /ex     [ (349n) ]
            /req    [ [ [ (00) ] [ (01) ] ] ]
        >>
        (3490) exch dup
        (3491) exch dup
        (3492) exch dup
        (3493) exch dup
        (3494) exch dup
        (3495) exch dup
        pop

        <<
            /parts [
                << /cset /N  /min  6  /max  6  /opt false  /linters [] >>
            ]
            /ex     [ (350n) ]
            /req    [ [ [ (01) ] [ (02) ] ] ]
        >>
        (3500) exch dup
        (3501) exch dup
        (3502) exch dup
        (3503) exch dup
        (3504) exch dup
        (3505) exch dup
        pop

        <<
            /parts [
                << /cset /N  /min  6  /max  6  /opt false  /linters [] >>
            ]
            /ex     [ (351n) ]
            /req    [ [ [ (01) ] [ (02) ] ] ]
        >>
        (3510) exch dup
        (3511) exch dup
        (3512) exch dup
        (3513) exch dup
        (3514) exch dup
        (3515) exch dup
        pop

        <<
            /parts [
                << /cset /N  /min  6  /max  6  /opt false  /linters [] >>
            ]
            /ex     [ (352n) ]
            /req    [ [ [ (01) ] [ (02) ] ] ]
        >>
        (3520) exch dup
        (3521) exch dup
        (3522) exch dup
        (3523) exch dup
        (3524) exch dup
        (3525) exch dup
        pop

        <<
            /parts [
                << /cset /N  /min  6  /max  6  /opt false  /linters [] >>
            ]
            /ex     [ (353n) ]
            /req    [ [ [ (00) ] [ (01) ] ] ]
        >>
        (3530) exch dup
        (3531) exch dup
        (3532) exch dup
        (3533) exch dup
        (3534) exch dup
        (3535) exch dup
        pop

        <<
            /parts [
                << /cset /N  /min  6  /max  6  /opt false  /linters [] >>
            ]
            /ex     [ (354n) ]
            /req    [ [ [ (00) ] [ (01) ] ] ]
        >>
        (3540) exch dup
        (3541) exch dup
        (3542) exch dup
        (3543) exch dup
        (3544) exch dup
        (3545) exch dup
        pop

        <<
            /parts [
                << /cset /N  /min  6  /max  6  /opt false  /linters [] >>
            ]
            /ex     [ (355n) ]
            /req    [ [ [ (00) ] [ (01) ] ] ]
        >>
        (3550) exch dup
        (3551) exch dup
        (3552) exch dup
        (3553) exch dup
        (3554) exch dup
        (3555) exch dup
        pop

        <<
            /parts [
                << /cset /N  /min  6  /max  6  /opt false  /linters [] >>
            ]
            /ex     [ (356n) ]
            /req    [ [ [ (01) ] [ (02) ] ] ]
        >>
        (3560) exch dup
        (3561) exch dup
        (3562) exch dup
        (3563) exch dup
        (3564) exch dup
        (3565) exch dup
        pop

        <<
            /parts [
                << /cset /N  /min  6  /max  6  /opt false  /linters [] >>
            ]
            /ex     [ (357n) ]
            /req    [ [ [ (01) ] [ (02) ] ] ]
        >>
        (3570) exch dup
        (3571) exch dup
        (3572) exch dup
        (3573) exch dup
        (3574) exch dup
        (3575) exch dup
        pop

        <<
            /parts [
                << /cset /N  /min  6  /max  6  /opt false  /linters [] >>
            ]
            /ex     [ (360n) ]
            /req    [ [ [ (01) ] [ (02) ] ] ]
        >>
        (3600) exch dup
        (3601) exch dup
        (3602) exch dup
        (3603) exch dup
        (3604) exch dup
        (3605) exch dup
        pop

        <<
            /parts [
                << /cset /N  /min  6  /max  6  /opt false  /linters [] >>
            ]
            /ex     [ (361n) ]
            /req    [ [ [ (01) ] [ (02) ] ] ]
        >>
        (3610) exch dup
        (3611) exch dup
        (3612) exch dup
        (3613) exch dup
        (3614) exch dup
        (3615) exch dup
        pop

        <<
            /parts [
                << /cset /N  /min  6  /max  6  /opt false  /linters [] >>
            ]
            /ex     [ (362n) ]
            /req    [ [ [ (00) ] [ (01) ] ] ]
        >>
        (3620) exch dup
        (3621) exch dup
        (3622) exch dup
        (3623) exch dup
        (3624) exch dup
        (3625) exch dup
        pop

        <<
            /parts [
                << /cset /N  /min  6  /max  6  /opt false  /linters [] >>
            ]
            /ex     [ (363n) ]
            /req    [ [ [ (00) ] [ (01) ] ] ]
        >>
        (3630) exch dup
        (3631) exch dup
        (3632) exch dup
        (3633) exch dup
        (3634) exch dup
        (3635) exch dup
        pop

        <<
            /parts [
                << /cset /N  /min  6  /max  6  /opt false  /linters [] >>
            ]
            /ex     [ (364n) ]
            /req    [ [ [ (01) ] [ (02) ] ] ]
        >>
        (3640) exch dup
        (3641) exch dup
        (3642) exch dup
        (3643) exch dup
        (3644) exch dup
        (3645) exch dup
        pop

        <<
            /parts [
                << /cset /N  /min  6  /max  6  /opt false  /linters [] >>
            ]
            /ex     [ (365n) ]
            /req    [ [ [ (01) ] [ (02) ] ] ]
        >>
        (3650) exch dup
        (3651) exch dup
        (3652) exch dup
        (3653) exch dup
        (3654) exch dup
        (3655) exch dup
        pop

        <<
            /parts [
                << /cset /N  /min  6  /max  6  /opt false  /linters [] >>
            ]
            /ex     [ (366n) ]
            /req    [ [ [ (01) ] [ (02) ] ] ]
        >>
        (3660) exch dup
        (3661) exch dup
        (3662) exch dup
        (3663) exch dup
        (3664) exch dup
        (3665) exch dup
        pop

        <<
            /parts [
                << /cset /N  /min  6  /max  6  /opt false  /linters [] >>
            ]
            /ex     [ (367n) ]
            /req    [ [ [ (00) ] [ (01) ] ] ]
        >>
        (3670) exch dup
        (3671) exch dup
        (3672) exch dup
        (3673) exch dup
        (3674) exch dup
        (3675) exch dup
        pop

        <<
            /parts [
                << /cset /N  /min  6  /max  6  /opt false  /linters [] >>
            ]
            /ex     [ (368n) ]
            /req    [ [ [ (00) ] [ (01) ] ] ]
        >>
        (3680) exch dup
        (3681) exch dup
        (3682) exch dup
        (3683) exch dup
        (3684) exch dup
        (3685) exch dup
        pop

        <<
            /parts [
                << /cset /N  /min  6  /max  6  /opt false  /linters [] >>
            ]
            /ex     [ (369n) ]
            /req    [ [ [ (00) ] [ (01) ] ] ]
        >>
        (3690) exch dup
        (3691) exch dup
        (3692) exch dup
        (3693) exch dup
        (3694) exch dup
        (3695) exch dup
        pop

        <<
            /parts [
                << /cset /N  /min  1  /max  8  /opt false  /linters [] >>
            ]
            /req    [ [ [ (00) ] ] [ [ (02) ] [ (8026) ] ] ]
        >>
        (37) exch dup
        pop

        <<
            /parts [
                << /cset /N  /min  1  /max 15  /opt false  /linters [] >>
            ]
            /ex     [ (390n) (391n) (394n) (8111) ]
            /req    [ [ [ (255) ] [ (8020) ] ] ]
        >>
        (3900) exch dup
        (3901) exch dup
        (3902) exch dup
        (3903) exch dup
        (3904) exch dup
        (3905) exch dup
        (3906) exch dup
        (3907) exch dup
        (3908) exch dup
        (3909) exch dup
        pop

        <<
            /parts [
                << /cset /N  /min  3  /max  3  /opt false  /linters [ /lintiso4217 ] >>
                << /cset /N  /min  1  /max 15  /opt false  /linters [] >>
            ]
            /ex     [ (391n) ]
            /req    [ [ [ (8020) ] ] ]
        >>
        (3910) exch dup
        (3911) exch dup
        (3912) exch dup
        (3913) exch dup
        (3914) exch dup
        (3915) exch dup
        (3916) exch dup
        (3917) exch dup
        (3918) exch dup
        (3919) exch dup
        pop

        <<
            /parts [
                << /cset /N  /min  1  /max 15  /opt false  /linters [] >>
            ]
            /ex     [ (392n) (393n) ]
            /req    [ [ [ (01) ] ] [ [ (30) ] [ (31nn) ] [ (32nn) ] [ (35nn) ] [ (36nn) ] ] ]
        >>
        (3920) exch dup
        (3921) exch dup
        (3922) exch dup
        (3923) exch dup
        (3924) exch dup
        (3925) exch dup
        (3926) exch dup
        (3927) exch dup
        (3928) exch dup
        (3929) exch dup
        pop

        <<
            /parts [
                << /cset /N  /min  3  /max  3  /opt false  /linters [ /lintiso4217 ] >>
                << /cset /N  /min  1  /max 15  /opt false  /linters [] >>
            ]
            /ex     [ (393n) ]
            /req    [ [ [ (30) ] [ (31nn) ] [ (32nn) ] [ (35nn) ] [ (36nn) ] ] ]
        >>
        (3930) exch dup
        (3931) exch dup
        (3932) exch dup
        (3933) exch dup
        (3934) exch dup
        (3935) exch dup
        (3936) exch dup
        (3937) exch dup
        (3938) exch dup
        (3939) exch dup
        pop

        <<
            /parts [
                << /cset /N  /min  4  /max  4  /opt false  /linters [] >>
            ]
            /ex     [ (394n) (8111) ]
            /req    [ [ [ (255) ] ] ]
        >>
        (3940) exch dup
        (3941) exch dup
        (3942) exch dup
        (3943) exch dup
        pop

        <<
            /parts [
                << /cset /N  /min  6  /max  6  /opt false  /linters [] >>
            ]
            /ex     [ (392n) (393n) (395n) (8005) ]
            /req    [ [ [ (30) ] [ (31nn) ] [ (32nn) ] [ (35nn) ] [ (36nn) ] ] ]
        >>
        (3950) exch dup
        (3951) exch dup
        (3952) exch dup
        (3953) exch dup
        (3954) exch dup
        (3955) exch dup
        pop

        <<
            /parts [
                << /cset /X  /min  1  /max 30  /opt false  /linters [] >>
            ]
        >>
        (400) exch dup
        pop

        <<
            /parts [
                << /cset /X  /min  1  /max 30  /opt false  /linters [ /lintkey ] >>
            ]
            /dlpkey [ ]
        >>
        (401) exch dup
        pop

        <<
            /parts [
                << /cset /N  /min 17  /max 17  /opt false  /linters [ /lintcsum /lintkey ] >>
            ]
            /dlpkey [ ]
        >>
        (402) exch dup
        pop

        <<
            /parts [
                << /cset /X  /min  1  /max 30  /opt false  /linters [] >>
            ]
            /req    [ [ [ (00) ] ] ]
        >>
        (403) exch dup
        pop

        <<
            /parts [
                << /cset /N  /min 13  /max 13  /opt false  /linters [ /lintcsum /lintkey ] >>
            ]
        >>
        (410) exch dup
        (411) exch dup
        (412) exch dup
        (413) exch dup
        pop

        <<
            /parts [
                << /cset /N  /min 13  /max 13  /opt false  /linters [ /lintcsum /lintkey ] >>
            ]
            /dlpkey [ [ (254) ] [ (7040) ] ]
        >>
        (414) exch dup
        pop

        <<
            /parts [
                << /cset /N  /min 13  /max 13  /opt false  /linters [ /lintcsum /lintkey ] >>
            ]
            /req    [ [ [ (8020) ] ] ]
            /dlpkey [ [ (8020) ] ]
        >>
        (415) exch dup
        pop

        <<
            /parts [
                << /cset /N  /min 13  /max 13  /opt false  /linters [ /lintcsum /lintkey ] >>
            ]
        >>
        (416) exch dup
        pop

        <<
            /parts [
                << /cset /N  /min 13  /max 13  /opt false  /linters [ /lintcsum /lintkey ] >>
            ]
            /dlpkey [ [ (7040) ] ]
        >>
        (417) exch dup
        pop

        <<
            /parts [
                << /cset /X  /min  1  /max 20  /opt false  /linters [] >>
            ]
            /ex     [ (421) ]
        >>
        (420) exch dup
        pop

        <<
            /parts [
                << /cset /N  /min  3  /max  3  /opt false  /linters [ /lintiso3166 ] >>
                << /cset /X  /min  1  /max  9  /opt false  /linters [] >>
            ]
            /ex     [ (4307) ]
        >>
        (421) exch dup
        pop

        <<
            /parts [
                << /cset /N  /min  3  /max  3  /opt false  /linters [ /lintiso3166 ] >>
            ]
            /ex     [ (426) ]
            /req    [ [ [ (01) ] [ (02) ] [ (8006) ] [ (8026) ] ] ]
        >>
        (422) exch dup
        pop

        <<
            /parts [
                << /cset /N  /min  1  /max 15  /opt false  /linters [ /lintiso3166list ] >>
            ]
            /ex     [ (426) ]
            /req    [ [ [ (01) ] [ (02) ] ] ]
        >>
        (423) exch dup
        pop

        <<
            /parts [
                << /cset /N  /min  3  /max  3  /opt false  /linters [ /lintiso3166 ] >>
            ]
            /ex     [ (426) ]
            /req    [ [ [ (01) ] [ (02) ] ] ]
        >>
        (424) exch dup
        pop

        <<
            /parts [
                << /cset /N  /min  1  /max 15  /opt false  /linters [ /lintiso3166list ] >>
            ]
            /ex     [ (426) ]
            /req    [ [ [ (01) ] [ (02) ] ] ]
        >>
        (425) exch dup
        pop

        <<
            /parts [
                << /cset /N  /min  3  /max  3  /opt false  /linters [ /lintiso3166 ] >>
            ]
            /req    [ [ [ (01) ] [ (02) ] ] ]
        >>
        (426) exch dup
        pop

        <<
            /parts [
                << /cset /X  /min  1  /max  3  /opt false  /linters [] >>
            ]
            /req    [ [ [ (01) ] [ (02) ] ] [ [ (422) ] ] ]
        >>
        (427) exch dup
        pop

        <<
            /parts [
                << /cset /X  /min  1  /max 35  /opt false  /linters [ /lintpcenc ] >>
            ]
            /req    [ [ [ (00) ] ] ]
        >>
        (4300) exch dup
        (4301) exch dup
        pop

        <<
            /parts [
                << /cset /X  /min  1  /max 70  /opt false  /linters [ /lintpcenc ] >>
            ]
            /req    [ [ [ (00) ] ] ]
        >>
        (4302) exch dup
        pop

        <<
            /parts [
                << /cset /X  /min  1  /max 70  /opt false  /linters [ /lintpcenc ] >>
            ]
            /req    [ [ [ (4302) ] ] ]
        >>
        (4303) exch dup
        pop

        <<
            /parts [
                << /cset /X  /min  1  /max 70  /opt false  /linters [ /lintpcenc ] >>
            ]
            /req    [ [ [ (00) ] ] ]
        >>
        (4304) exch dup
        (4305) exch dup
        (4306) exch dup
        pop

        <<
            /parts [
                << /cset /X  /min  2  /max  2  /opt false  /linters [ /lintiso3166alpha2 ] >>
            ]
            /req    [ [ [ (00) ] ] ]
        >>
        (4307) exch dup
        pop

        <<
            /parts [
                << /cset /X  /min  1  /max 30  /opt false  /linters [] >>
            ]
            /req    [ [ [ (00) ] ] ]
        >>
        (4308) exch dup
        pop

        <<
            /parts [
                << /cset /N  /min 10  /max 10  /opt false  /linters [ /lintlatitude ] >>
                << /cset /N  /min 10  /max 10  /opt false  /linters [ /lintlongitude ] >>
            ]
            /req    [ [ [ (00) ] ] ]
        >>
        (4309) exch dup
        pop

        <<
            /parts [
                << /cset /X  /min  1  /max 35  /opt false  /linters [ /lintpcenc ] >>
            ]
            /req    [ [ [ (00) ] ] ]
        >>
        (4310) exch dup
        (4311) exch dup
        pop

        <<
            /parts [
                << /cset /X  /min  1  /max 70  /opt false  /linters [ /lintpcenc ] >>
            ]
            /req    [ [ [ (00) ] ] ]
        >>
        (4312) exch dup
        pop

        <<
            /parts [
                << /cset /X  /min  1  /max 70  /opt false  /linters [ /lintpcenc ] >>
            ]
            /req    [ [ [ (4312) ] ] ]
        >>
        (4313) exch dup
        pop

        <<
            /parts [
                << /cset /X  /min  1  /max 70  /opt false  /linters [ /lintpcenc ] >>
            ]
            /req    [ [ [ (00) ] ] ]
        >>
        (4314) exch dup
        (4315) exch dup
        (4316) exch dup
        pop

        <<
            /parts [
                << /cset /X  /min  2  /max  2  /opt false  /linters [ /lintiso3166alpha2 ] >>
            ]
            /req    [ [ [ (00) ] ] ]
        >>
        (4317) exch dup
        pop

        <<
            /parts [
                << /cset /X  /min  1  /max 20  /opt false  /linters [] >>
            ]
            /req    [ [ [ (00) ] ] ]
        >>
        (4318) exch dup
        pop

        <<
            /parts [
                << /cset /X  /min  1  /max 30  /opt false  /linters [] >>
            ]
            /req    [ [ [ (00) ] ] ]
        >>
        (4319) exch dup
        pop

        <<
            /parts [
                << /cset /X  /min  1  /max 35  /opt false  /linters [ /lintpcenc ] >>
            ]
            /req    [ [ [ (00) ] ] ]
        >>
        (4320) exch dup
        pop

        <<
            /parts [
                << /cset /N  /min  1  /max  1  /opt false  /linters [ /lintyesno ] >>
            ]
            /req    [ [ [ (00) ] ] ]
        >>
        (4321) exch dup
        (4322) exch dup
        (4323) exch dup
        pop

        <<
            /parts [
                << /cset /N  /min  6  /max  6  /opt false  /linters [ /lintyymmd0 ] >>
                << /cset /N  /min  4  /max  4  /opt false  /linters [ /linthhmm ] >>
            ]
            /req    [ [ [ (00) ] ] ]
        >>
        (4324) exch dup
        (4325) exch dup
        pop

        <<
            /parts [
                << /cset /N  /min  6  /max  6  /opt false  /linters [ /lintyymmdd ] >>
            ]
            /req    [ [ [ (00) ] ] ]
        >>
        (4326) exch dup
        pop

        <<
            /parts [
                << /cset /N  /min  6  /max  6  /opt false  /linters [] >>
                << /cset /X  /min  1  /max  1  /opt true   /linters [ /linthyphen ] >>
            ]
            /ex     [ (4331) ]
            /req    [ [ [ (00) ] ] ]
        >>
        (4330) exch dup
        pop

        <<
            /parts [
                << /cset /N  /min  6  /max  6  /opt false  /linters [] >>
                << /cset /X  /min  1  /max  1  /opt true   /linters [ /linthyphen ] >>
            ]
            /ex     [ (4330) ]
            /req    [ [ [ (00) ] ] ]
        >>
        (4331) exch dup
        pop

        <<
            /parts [
                << /cset /N  /min  6  /max  6  /opt false  /linters [] >>
                << /cset /X  /min  1  /max  1  /opt true   /linters [ /linthyphen ] >>
            ]
            /ex     [ (4333) ]
            /req    [ [ [ (00) ] ] ]
        >>
        (4332) exch dup
        pop

        <<
            /parts [
                << /cset /N  /min  6  /max  6  /opt false  /linters [] >>
                << /cset /X  /min  1  /max  1  /opt true   /linters [ /linthyphen ] >>
            ]
            /ex     [ (4332) ]
            /req    [ [ [ (00) ] ] ]
        >>
        (4333) exch dup
        pop

        <<
            /parts [
                << /cset /N  /min 13  /max 13  /opt false  /linters [] >>
            ]
            /req    [ [ [ (01) ] [ (02) ] [ (8006) ] [ (8026) ] ] ]
        >>
        (7001) exch dup
        pop

        <<
            /parts [
                << /cset /X  /min  1  /max 30  /opt false  /linters [] >>
            ]
            /req    [ [ [ (01) ] [ (02) ] ] ]
        >>
        (7002) exch dup
        pop

        <<
            /parts [
                << /cset /N  /min  6  /max  6  /opt false  /linters [ /lintyymmdd ] >>
                << /cset /N  /min  4  /max  4  /opt false  /linters [ /linthhmm ] >>
            ]
            /req    [ [ [ (01) ] [ (02) ] ] ]
        >>
        (7003) exch dup
        pop

        <<
            /parts [
                << /cset /N  /min  1  /max  4  /opt false  /linters [] >>
            ]
            /req    [ [ [ (01) ] ] [ [ (10) ] ] ]
        >>
        (7004) exch dup
        pop

        <<
            /parts [
                << /cset /X  /min  1  /max 12  /opt false  /linters [] >>
            ]
            /req    [ [ [ (01) ] [ (02) ] ] ]
        >>
        (7005) exch dup
        pop

        <<
            /parts [
                << /cset /N  /min  6  /max  6  /opt false  /linters [ /lintyymmdd ] >>
            ]
            /req    [ [ [ (01) ] [ (02) ] ] ]
        >>
        (7006) exch dup
        pop

        <<
            /parts [
                << /cset /N  /min  6  /max  6  /opt false  /linters [ /lintyymmdd ] >>
                << /cset /N  /min  6  /max  6  /opt true   /linters [ /lintyymmdd ] >>
            ]
            /req    [ [ [ (01) ] [ (02) ] ] ]
        >>
        (7007) exch dup
        pop

        <<
            /parts [
                << /cset /X  /min  1  /max  3  /opt false  /linters [] >>
            ]
            /req    [ [ [ (01) ] [ (02) ] ] ]
        >>
        (7008) exch dup
        pop

        <<
            /parts [
                << /cset /X  /min  1  /max 10  /opt false  /linters [] >>
            ]
            /req    [ [ [ (01) ] [ (02) ] ] ]
        >>
        (7009) exch dup
        pop

        <<
            /parts [
                << /cset /X  /min  1  /max  2  /opt false  /linters [] >>
            ]
            /req    [ [ [ (01) ] [ (02) ] ] ]
        >>
        (7010) exch dup
        pop

        <<
            /parts [
                << /cset /N  /min  6  /max  6  /opt false  /linters [ /lintyymmdd ] >>
                << /cset /N  /min  4  /max  4  /opt true   /linters [ /linthhmm ] >>
            ]
            /req    [ [ [ (01) ] [ (02) ] ] ]
        >>
        (7011) exch dup
        pop

        <<
            /parts [
                << /cset /X  /min  1  /max 20  /opt false  /linters [] >>
            ]
            /req    [ [ [ (01) ] [ (8006) ] ] [ [ (416) ] ] ]
        >>
        (7020) exch dup
        pop

        <<
            /parts [
                << /cset /X  /min  1  /max 20  /opt false  /linters [] >>
            ]
            /req    [ [ [ (01) ] [ (8006) ] ] ]
        >>
        (7021) exch dup
        pop

        <<
            /parts [
                << /cset /X  /min  1  /max 20  /opt false  /linters [] >>
            ]
            /req    [ [ [ (7021) ] ] ]
        >>
        (7022) exch dup
        pop

        <<
            /parts [
                << /cset /X  /min  1  /max 30  /opt false  /linters [ /lintkey ] >>
            ]
        >>
        (7023) exch dup
        pop

        <<
            /parts [
                << /cset /N  /min  3  /max  3  /opt false  /linters [ /lintiso3166999 ] >>
                << /cset /X  /min  1  /max 27  /opt false  /linters [] >>
            ]
            /req    [ [ [ (01) ] [ (02) ] ] ]
        >>
        (7030) exch dup
        (7031) exch dup
        (7032) exch dup
        (7033) exch dup
        (7034) exch dup
        (7035) exch dup
        (7036) exch dup
        (7037) exch dup
        (7038) exch dup
        (7039) exch dup
        pop

        <<
            /parts [
                << /cset /N  /min  1  /max  1  /opt false  /linters [] >>
                << /cset /X  /min  1  /max  1  /opt false  /linters [] >>
                << /cset /X  /min  1  /max  1  /opt false  /linters [] >>
                << /cset /X  /min  1  /max  1  /opt false  /linters [ /lintimporteridx ] >>
            ]
            /dlattr false
        >>
        (7040) exch dup
        pop

        <<
            /parts [
                << /cset /X  /min  1  /max 20  /opt false  /linters [] >>
            ]
            /req    [ [ [ (01) ] ] ]
        >>
        (710) exch dup
        (711) exch dup
        (712) exch dup
        (713) exch dup
        (714) exch dup
        (715) exch dup
        pop

        <<
            /parts [
                << /cset /X  /min  2  /max  2  /opt false  /linters [] >>
                << /cset /X  /min  1  /max 28  /opt false  /linters [] >>
            ]
            /req    [ [ [ (01) ] [ (8004) ] ] ]
        >>
        (7230) exch dup
        (7231) exch dup
        (7232) exch dup
        (7233) exch dup
        (7234) exch dup
        (7235) exch dup
        (7236) exch dup
        (7237) exch dup
        (7238) exch dup
        (7239) exch dup
        pop

        <<
            /parts [
                << /cset /X  /min  1  /max 20  /opt false  /linters [] >>
            ]
            /req    [ [ [ (01) ] [ (8006) ] ] ]
        >>
        (7240) exch dup
        pop

        <<
            /parts [
                << /cset /N  /min  2  /max  2  /opt false  /linters [ /lintmediatype ] >>
            ]
            /req    [ [ [ (8017) ] [ (8018) ] ] ]
        >>
        (7241) exch dup
        pop

        <<
            /parts [
                << /cset /X  /min  1  /max 25  /opt false  /linters [] >>
            ]
            /req    [ [ [ (8017) ] [ (8018) ] ] ]
        >>
        (7242) exch dup
        pop

        <<
            /parts [
                << /cset /N  /min  8  /max  8  /opt false  /linters [ /lintyyyymmdd ] >>
            ]
            /ex     [ (7251) ]
            /req    [ [ [ (8018) ] ] ]
            /dlattr false
        >>
        (7250) exch dup
        pop

        <<
            /parts [
                << /cset /N  /min  8  /max  8  /opt false  /linters [ /lintyyyymmdd ] >>
                << /cset /N  /min  4  /max  4  /opt false  /linters [ /linthhmm ] >>
            ]
            /ex     [ (7250) ]
            /req    [ [ [ (8018) ] ] ]
            /dlattr false
        >>
        (7251) exch dup
        pop

        <<
            /parts [
                << /cset /N  /min  1  /max  1  /opt false  /linters [ /lintiso5218 ] >>
            ]
            /req    [ [ [ (8018) ] ] ]
            /dlattr false
        >>
        (7252) exch dup
        pop

        <<
            /parts [
                << /cset /X  /min  1  /max 40  /opt false  /linters [ /lintpcenc ] >>
            ]
            /ex     [ (7256) (7259) ]
            /req    [ [ [ (8017) ] [ (8018) ] ] ]
            /dlattr false
        >>
        (7253) exch dup
        (7254) exch dup
        pop

        <<
            /parts [
                << /cset /X  /min  1  /max 10  /opt false  /linters [] >>
            ]
            /ex     [ (7256) (7259) ]
            /req    [ [ [ (8017) ] [ (8018) ] ] ]
            /dlattr false
        >>
        (7255) exch dup
        pop

        <<
            /parts [
                << /cset /X  /min  1  /max 90  /opt false  /linters [ /lintpcenc ] >>
            ]
            /req    [ [ [ (8017) ] [ (8018) ] ] ]
            /dlattr false
        >>
        (7256) exch dup
        pop

        <<
            /parts [
                << /cset /X  /min  1  /max 70  /opt false  /linters [ /lintpcenc ] >>
            ]
            /req    [ [ [ (8018) ] ] ]
            /dlattr false
        >>
        (7257) exch dup
        pop

        <<
            /parts [
                << /cset /X  /min  3  /max  3  /opt false  /linters [ /lintposinseqslash ] >>
            ]
            /req    [ [ [ (8018) (7259) ] ] ]
            /dlattr false
        >>
        (7258) exch dup
        pop

        <<
            /parts [
                << /cset /X  /min  1  /max 40  /opt false  /linters [ /lintpcenc ] >>
            ]
            /ex     [ (7256) ]
            /req    [ [ [ (8018) ] ] ]
            /dlattr false
        >>
        (7259) exch dup
        pop

        <<
            /parts [
                << /cset /N  /min  4  /max  4  /opt false  /linters [ /lintnonzero ] >>
                << /cset /N  /min  5  /max  5  /opt false  /linters [ /lintnonzero ] >>
                << /cset /N  /min  3  /max  3  /opt false  /linters [ /lintnonzero ] >>
                << /cset /N  /min  1  /max  1  /opt false  /linters [ /lintwinding ] >>
                << /cset /N  /min  1  /max  1  /opt false  /linters [] >>
            ]
            /req    [ [ [ (01) ] ] ]
        >>
        (8001) exch dup
        pop

        <<
            /parts [
                << /cset /X  /min  1  /max 20  /opt false  /linters [] >>
            ]
        >>
        (8002) exch dup
        pop

        <<
            /parts [
                << /cset /N  /min  1  /max  1  /opt false  /linters [ /lintzero ] >>
                << /cset /N  /min 13  /max 13  /opt false  /linters [ /lintcsum /lintkey ] >>
                << /cset /X  /min  1  /max 16  /opt true   /linters [] >>
            ]
            /dlpkey [ ]
        >>
        (8003) exch dup
        pop

        <<
            /parts [
                << /cset /X  /min  1  /max 30  /opt false  /linters [ /lintkey ] >>
            ]
            /dlpkey [ [ (7040) ] ]
        >>
        (8004) exch dup
        pop

        <<
            /parts [
                << /cset /N  /min  6  /max  6  /opt false  /linters [] >>
            ]
            /req    [ [ [ (01) ] [ (02) ] ] ]
        >>
        (8005) exch dup
        pop

        <<
            /parts [
                << /cset /N  /min 14  /max 14  /opt false  /linters [ /lintcsum ] >>
                << /cset /N  /min  4  /max  4  /opt false  /linters [ /lintpieceoftotal ] >>
            ]
            /ex     [ (01) (37) ]
            /dlpkey [ [ (22) (10) (21) ] ]
        >>
        (8006) exch dup
        pop

        <<
            /parts [
                << /cset /X  /min  1  /max 34  /opt false  /linters [ /lintiban ] >>
            ]
            /req    [ [ [ (415) ] ] ]
        >>
        (8007) exch dup
        pop

        <<
            /parts [
                << /cset /N  /min  8  /max  8  /opt false  /linters [ /lintyymmddhh ] >>
                << /cset /N  /min  1  /max  4  /opt true   /linters [ /lintmmoptss ] >>
            ]
            /req    [ [ [ (01) ] [ (02) ] ] ]
        >>
        (8008) exch dup
        pop

        <<
            /parts [
                << /cset /X  /min  1  /max 50  /opt false  /linters [] >>
            ]
            /req    [ [ [ (00) ] [ (01) ] ] ]
        >>
        (8009) exch dup
        pop

        <<
            /parts [
                << /cset /Y  /min  1  /max 30  /opt false  /linters [ /lintkey ] >>
            ]
            /dlpkey [ [ (8011) ] ]
        >>
        (8010) exch dup
        pop

        <<
            /parts [
                << /cset /N  /min  1  /max 12  /opt false  /linters [ /lintnozeroprefix ] >>
            ]
            /req    [ [ [ (8010) ] ] ]
            /dlattr false
        >>
        (8011) exch dup
        pop

        <<
            /parts [
                << /cset /X  /min  1  /max 20  /opt false  /linters [] >>
            ]
            /req    [ [ [ (01) ] [ (8006) ] ] ]
        >>
        (8012) exch dup
        pop

        <<
            /parts [
                << /cset /X  /min  1  /max 25  /opt false  /linters [ /lintcsumalpha /lintkey ] >>
            ]
            /dlpkey [ ]
        >>
        (8013) exch dup
        pop

        <<
            /parts [
                << /cset /X  /min  1  /max 25  /opt false  /linters [ /lintcsumalpha /lintkey /linthasnondigit ] >>
            ]
            /req    [ [ [ (01) ] ] ]
            /dlattr false
        >>
        (8014) exch dup
        pop

        <<
            /parts [
                << /cset /N  /min 18  /max 18  /opt false  /linters [ /lintcsum /lintkey ] >>
            ]
            /ex     [ (8018) ]
            /dlpkey [ [ (8019) ] ]
        >>
        (8017) exch dup
        pop

        <<
            /parts [
                << /cset /N  /min 18  /max 18  /opt false  /linters [ /lintcsum /lintkey ] >>
            ]
            /ex     [ (8017) ]
            /dlpkey [ [ (8019) ] ]
        >>
        (8018) exch dup
        pop

        <<
            /parts [
                << /cset /N  /min  1  /max 10  /opt false  /linters [] >>
            ]
            /req    [ [ [ (8017) ] [ (8018) ] ] ]
            /dlattr false
        >>
        (8019) exch dup
        pop

        <<
            /parts [
                << /cset /X  /min  1  /max 25  /opt false  /linters [] >>
            ]
            /req    [ [ [ (415) ] ] ]
        >>
        (8020) exch dup
        pop

        <<
            /parts [
                << /cset /N  /min 14  /max 14  /opt false  /linters [ /lintcsum ] >>
                << /cset /N  /min  4  /max  4  /opt false  /linters [ /lintpieceoftotal ] >>
            ]
            /ex     [ (02) (8006) ]
            /req    [ [ [ (37) ] ] ]
        >>
        (8026) exch dup
        pop

        <<
            /parts [
                << /cset /Z  /min  1  /max 90  /opt false  /linters [] >>
            ]
            /req    [ [ [ (00) ] [ (01) (21) ] [ (253) ] [ (255) ] [ (8003) ] [ (8004) ] [ (8006) (21) ] [ (8010) (8011) ] [ (8017) ] [ (8018) ] ] ]
        >>
        (8030) exch dup
        pop

        <<
            /parts [
                << /cset /X  /min  1  /max 70  /opt false  /linters [ /lintcouponcode ] >>
            ]
        >>
        (8110) exch dup
        pop

        <<
            /parts [
                << /cset /N  /min  4  /max  4  /opt false  /linters [] >>
            ]
            /req    [ [ [ (255) ] ] ]
        >>
        (8111) exch dup
        pop

        <<
            /parts [
                << /cset /X  /min  1  /max 70  /opt false  /linters [ /lintcouponposoffer ] >>
            ]
        >>
        (8112) exch dup
        pop

        <<
            /parts [
                << /cset /X  /min  1  /max 70  /opt false  /linters [] >>
            ]
            /req    [ [ [ (01) ] ] ]
            /dlattr false
        >>
        (8200) exch dup
        pop

        <<
            /parts [
                << /cset /X  /min  1  /max 30  /opt false  /linters [] >>
            ]
        >>
        (90) exch dup
        pop

        <<
            /parts [
                << /cset /X  /min  1  /max 90  /opt false  /linters [] >>
            ]
        >>
        (91) exch dup
        (92) exch dup
        (93) exch dup
        (94) exch dup
        (95) exch dup
        (96) exch dup
        (97) exch dup
        (98) exch dup
        (99) exch dup
        pop

    >> def
} ctxdef

    % Extract AIs and vals from provided GS1 data in the indicated format

    /ai eq {  % Bracketed AI element string

        % Parse out AIs and values
        (\() anchorsearch not {
            pop /bwipp.GS1aiMissingOpenParen (AIs must start with '\(') //raiseerror exec
        } if
        pop
        mark exch {  % loop
            dup () eq {pop exit} if
            (\)) search not {
                cleartomark /bwipp.GS1aiMissingCloseParen (AIs must end with '\)') //raiseerror exec
            } if
            exch pop exch
            (\() search { exch pop exch } { () } ifelse
        } loop
        counttomark dup 0 gt {dup 2 idiv 1 add -1 exch {-1 roll} for} {pop} ifelse
        counttomark 2 idiv array astore /ais exch def
        counttomark array astore [ exch {  % Expand ordinals of the form ^NNN to ASCII
            << /parse parse /parseonly true /parsefnc false >> //parseinput exec
        } forall ] /vals exch def
        pop

    } {  % Digital Link URI

        % Validate and strip the scheme
        (http://) anchorsearch not {
        (HTTP://) anchorsearch not {
        (https://) anchorsearch not {
        (HTTPS://) anchorsearch not {
            pop /bwipp.GS1dlURIbadScheme (Scheme must be http:// HTTP:// https:// or HTTPS://) //raiseerror exec
        } if} if} if} if
        pop

        % Strip the domain
        (/) search not {
            pop /bwipp.GS1dlMissingDomainOrPathInfo (URI must contain a domain and path info) //raiseerror exec
        } if
        pop pop

        % Fragment delimits end of data
        (#) search {
            exch pop exch pop
        } if

        % Query parameter marker splits path info and query parameters
        (?) search not {
            () exch null exch
        } if
        /pp exch def
        pop
        /qp exch def

        % Find positions of character immediately following "/" in the path info
        mark 0
        0 pp {
            (/) search not {pop exit} if
            length 1 add exch pop 2 index add exch
        } loop
        counttomark 1 sub array astore /pipos exch def pop pop
        pipos length 1 le {
            /bwipp.GS1dlNoAIinfo (The path was too short to contain AI info) //raiseerror exec
        } if

        % Walk backwards to find the right-most path element that is a valid dlpkey
        false
        pipos length 2 sub -2 0 {
            dup
            dup pipos exch get
            exch pipos exch 1 add get 1 index sub 1 sub pp 3 1 roll getinterval
            dup gs1syntax exch known {
                gs1syntax exch get /dlpkey known {
                    exch pop true exit
                } if
            } {
                pop
            } ifelse
            pop
        } for
        not {
            /bwipp.GS1dlNoAIinfo (The path does not contain a valid primary key) //raiseerror exec
        } if
        pipos exch get dup pp length exch sub pp 3 1 roll getinterval /pp exch def

        /uriunescape {
            /qq exch def  % Is query parameter
            /in exch def
            /out in length string def
            0 0 {
                1 index in length ge {exit} if
                in 2 index get
                dup 43 eq qq and {  % "+" -> " " in query params
                    pop out 1 index 32 put
                    1 add exch 1 add exch
                } {
                dup 37 eq 3 index in length 2 sub lt and {  % "%nn" -> ord
                    pop
                    in 2 index 1 add 2 getinterval 0 exch {
                        dup dup 48 ge exch  57 le and {48 sub} {  % 0-9
                        dup dup 65 ge exch  70 le and {55 sub} {  % A-F
                        dup dup 97 ge exch 102 le and {87 sub} {  % a-f
                            pop pop /bwipp.GS1dlBadHexCharacter (Invalid hex character) //raiseerror exec
                        } ifelse } ifelse } ifelse
                        exch 16 mul add
                    } forall
                    out exch 2 index exch put
                    1 add exch 3 add exch
                } {
                    out exch 2 index exch put
                    1 add exch 1 add exch
                } ifelse } ifelse
            } loop
            out exch 0 exch getinterval /out exch def
            pop
            out
        } def

        /isvaliddlpkeyseq {
            /in exch def
            false
            gs1syntax in 0 get get /dlpkey get {
                /seq exch def
                /i 1 def  /j 0 def
                {
                    i in length ge {exit} if
                    j seq length ge {exit} if
                    in i get seq j get eq {
                        /i i 1 add def
                    } if
                    /j j 1 add def
                } loop
                i in length eq {pop true exit} if
            } forall
        } def

        /ais 99 array def
        /vals 99 array def
        0

        % Extract AIs from the path components
        pp {
            (/) search {
                ais exch 4 index exch put
                pop
                (/) search {exch pop} {() exch} ifelse
                vals exch 3 index exch false uriunescape put
            } {
                pop exit
            } ifelse
            exch 1 add exch
        } loop
        dup /plen exch def

        % Validate the key-qualifiers in the path info sequence
        dup 1 gt {
            ais 0 plen getinterval isvaliddlpkeyseq not {
                pop /bwipp.GS1dlBadPathInfo (The AIs in the path are not a valid key-qualifier sequence for the key) //raiseerror exec
            } if
        } if

        % Extract AIs from the query parameters
        qp {
            dup () eq {pop exit} if
            (&) search {exch pop} {() exch} ifelse
            (=) search {
                true 1 index {dup 48 ge exch 57 le and and} forall {
                    ais exch 5 index exch put
                    pop
                    vals exch 3 index exch true uriunescape put
                    exch 1 add exch
                } {  % Ignore non-numeric parameters
                    pop pop pop
                } ifelse
            } {  % Ignore singletons and empty parameters
                pop
            } ifelse
        } loop

        % Check for invalid DL data attributes in the query params
        ais plen 2 index plen sub getinterval {
            gs1syntax 1 index known {
                gs1syntax 1 index get /dlattr 2 copy known { get } { pop pop true } ifelse
            } {
                dontlint
            } ifelse
            not {
                dup length dup 46 add string
                dup 0 (AI \() putinterval
                dup 4 4 index putinterval
                dup 2 index 4 add (\) is not a valid GS1 DL URI data attribute) putinterval
                exch pop exch pop /bwipp.GS1dlInvalidDataAttribute exch //raiseerror exec
            } if
            pop
        } forall

        % Check for valid path info attributes in query params
        ais plen 2 index plen sub getinterval {
            plen -1 1 {  % Trial the query param at each non-initial path info position
                1 index [
                    ais 0 plen getinterval aload pop
                    counttomark 3 add -2 roll exch 1 roll
                ] isvaliddlpkeyseq {
                    exch pop
                    dup length dup 50 add string
                    dup 0 (AI \() putinterval
                    dup 4 4 index putinterval
                    dup 2 index 4 add (\) from query params should be in the path info) putinterval
                    exch pop exch pop /bwipp.GS1dlAttributeMustBeQualifier exch //raiseerror exec
                } if
            } for
            pop
        } forall

        /ais ais 0 3 index getinterval def
        /vals vals 0 3 index getinterval def
        pop

        % Expand any extracted GTINs
        0 1 ais length 1 sub {
            dup ais exch get (01) eq {
                dup vals exch get
                dup length dup 8 eq exch dup 12 eq exch 13 eq or or {
                    (00000000000000) 14 string copy dup 3 -1 roll dup length 14 exch sub exch putinterval
                    vals exch 2 index exch put
                } {
                    pop
                } ifelse
            } if
            pop
        } for

    } ifelse

    % Two-digit AI prefixes not requiring FNC1 separation
{
    /aifixed << [
        (00) (01) (02) (03) (04)
        (11) (12) (13) (14) (15) (16) (17) (18) (19) (20)
        % (23)   % Reassigned to variable-length AI (235)!
        (31) (32) (33) (34) (35) (36)
        (41)
    ] {dup} forall >> def
} ctxdef

    /fncs [
        ais {
            true exch
            dup length 2 ge {
                0 2 getinterval aifixed exch known {pop false} if
            } {
                pop
            } ifelse
        } forall
    ] def


    % Linter routines for validating AI components
{
    /cset82 <<
        0 (!"%&'\(\)*+,-./0123456789:;<=>?ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz)
        { exch dup 1 add } forall pop
    >> def

    /cset39 <<
        0 (#-/0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ)
        { exch dup 1 add } forall pop
    >> def

    /cset32 <<
        0 (23456789ABCDEFGHJKLMNPQRSTUVWXYZ)
        { exch dup 1 add } forall pop
    >> def

    /cset64 <<
        0 (ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_)
        { exch dup 1 add } forall pop
    >> def
} ctxdef

    /lintnumeric {
        true exch { dup 48 lt exch 57 gt or { pop false exit } if } forall
        not { pop /bwipp.GS1notNumeric (Not numeric) false exit } if
    } def

    /lintcset82 {
        true exch { cset82 exch known not { pop false exit } if } forall
        not { pop /bwipp.GS1badCSET82character (Invalid CSET 82 character) false exit } if
    } def

    /lintcset39 {
        true exch { cset39 exch known not { pop false exit } if } forall
        not { pop /bwipp.GS1badCSET39character  (Invalid CSET 39 character) false exit } if
    } def

    /lintcset64 {
        % TODO Validate base64 padding rules
        true exch { dup cset64 exch known not exch 61 ne and { pop false exit } if } forall
        not { pop /bwipp.GS1badCSET64character  (Invalid CSET 64 character) false exit } if
    } def

    /lintkey {
        dup length 2 lt { pop pop /bwipp.GS1keyTooShort (Key is too short) false exit } if
        dup 0 get dup 48 lt exch 57 gt or exch
        1 get dup 48 lt exch 57 gt or or {
            pop /bwipp.GS1badGCP (Non-numeric company prefix) false exit
        } if
    } def

    /lintimporteridx {
        (-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz)
        exch search not {pop pop /bwipp.GS1badImporterIndex (Invalid importer index) false exit} if
        pop pop pop
    } def

    /lintcsum {
        mark exch
        dup length 2 mod 0 eq {3} {1} ifelse
        exch { 48 sub 1 index mul exch 4 exch sub } forall pop
        0 counttomark 1 sub {add} repeat exch pop
        10 mod 0 ne { pop /bwipp.GS1badChecksum (Bad checksum) false exit } if
    } def

    /lintcsumalpha {
        dup length 2 lt { pop pop /bwipp.GS1alphaTooShort (Alphanumeric string is too short to check) false exit} if
        dup length 2 sub
        2 copy
        0 exch getinterval mark exch {
            dup cset82 exch known { cset82 exch get } { -1 exit } ifelse
        } forall
        dup -1 eq { cleartomark pop pop pop /bwipp.GS1UnknownCSET82Character (Unknown CSET 82 character) false exit} if
        counttomark array astore exch pop
        3 1 roll
        2 getinterval mark exch {
            dup cset32 exch known { cset32 exch get } { -1 exit } ifelse
        } forall
        dup -1 eq { cleartomark pop pop /bwipp.GS1UnknownCSET32Character (Unknown CSET 32 character) false exit} if
        counttomark array astore exch pop
        dup 0 get 5 bitshift exch 1 get add exch
        [ 2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 ]
        1 index length
        dup 2 index length gt { pop pop pop pop pop /bwipp.GS1alphaTooLong (Alphanumeric string is too long to check) false exit} if
        0 exch getinterval {exch} forall
        0 exch { 3 -1 roll exch mul add } forall 1021 mod
        ne { pop /bwipp.GS1badAlphaCheckCharacters (Bad alphanumeric check characters) false exit} if
    } def

{
    /iso3166 << [
        /004 /008 /010 /012 /016 /020 /024 /028 /031 /032 /036 /040 /044 /048
        /050 /051 /052 /056 /060 /064 /068 /070 /072 /074 /076 /084 /086 /090 /092 /096
        /100 /104 /108 /112 /116 /120 /124 /132 /136 /140 /144 /148
        /152 /156 /158 /162 /166 /170 /174 /175 /178 /180 /184 /188 /191 /192 /196
        /203 /204 /208 /212 /214 /218 /222 /226 /231 /232 /233 /234 /238 /239 /242 /246 /248
        /250 /254 /258 /260 /262 /266 /268 /270 /275 /276 /288 /292 /296
        /300 /304 /308 /312 /316 /320 /324 /328 /332 /334 /336 /340 /344 /348
        /352 /356 /360 /364 /368 /372 /376 /380 /384 /388 /392 /398
        /400 /404 /408 /410 /414 /417 /418 /422 /426 /428 /430 /434 /438 /440 /442 /446
        /450 /454 /458 /462 /466 /470 /474 /478 /480 /484 /492 /496 /498 /499
        /500 /504 /508 /512 /516 /520 /524 /528 /531 /533 /534 /535 /540 /548
        /554 /558 /562 /566 /570 /574 /578 /580 /581 /583 /584 /585 /586 /591 /598
        /600 /604 /608 /612 /616 /620 /624 /626 /630 /634 /638 /642 /643 /646
        /652 /654 /659 /660 /662 /663 /666 /670 /674 /678 /682 /686 /688 /690 /694
        /702 /703 /704 /705 /706 /710 /716 /724 /728 /729 /732 /740 /744 /748
        /752 /756 /760 /762 /764 /768 /772 /776 /780 /784 /788 /792 /795 /796 /798
        /800 /804 /807 /818 /826 /831 /832 /833 /834 /840
        /850 /854 /858 /860 /862 /876 /882 /887 /894
    ] {dup} forall >> def
} ctxdef

    /lintiso3166 {
        iso3166 exch known not { pop /bwipp.GS1UnknownCountry (Unknown country code) false exit } if
    } def

    /lintiso3166999 {
        dup /999 ne {
            iso3166 exch known not { pop /bwipp.GS1UnknownCountryOr999 (Unknown country code or not 999) false exit } if
        } {
            pop
        } ifelse
    } def

    /lintiso3166list {
        dup length 3 mod 0 ne {
            pop pop /bwipp.GS1BadCountryListLength (Not a group of three-digit country codes) false exit
        } if
        true
        0 3 3 index length 1 sub {
            2 index exch 3 getinterval
            iso3166 exch known not { pop pop false exit } if
        } for
        not { pop /bwipp.GS1UnknownCountry (Unknown country code) false exit } if
        pop
    } def

{
    /iso3166alpha2 << [
        /AD /AE /AF /AG /AI /AL /AM /AO /AQ /AR /AS /AT /AU /AW /AX /AZ
        /BA /BB /BD /BE /BF /BG /BH /BI /BJ /BL /BM /BN /BO /BQ /BR /BS /BT /BV /BW /BY /BZ
        /CA /CC /CD /CF /CG /CH /CI /CK /CL /CM /CN /CO /CR /CU /CV /CW /CX /CY /CZ
        /DE /DJ /DK /DM /DO /DZ
        /EC /EE /EG /EH /ER /ES /ET
        /FI /FJ /FK /FM /FO /FR
        /GA /GB /GD /GE /GF /GG /GH /GI /GL /GM /GN /GP /GQ /GR /GS /GT /GU /GW /GY
        /HK /HM /HN /HR /HT /HU
        /ID /IE /IL /IM /IN /IO /IQ /IR /IS /IT /JE /JM /JO /JP
        /KE /KG /KH /KI /KM /KN /KP /KR /KW /KY /KZ
        /LA /LB /LC /LI /LK /LR /LS /LT /LU /LV /LY
        /MA /MC /MD /ME /MF /MG /MH /MK /ML /MM /MN /MO /MP /MQ /MR /MS /MT /MU /MV /MW /MX /MY /MZ
        /NA /NC /NE /NF /NG /NI /NL /NO /NP /NR /NU /NZ
        /OM
        /PA /PE /PF /PG /PH /PK /PL /PM /PN /PR /PS /PT /PW /PY
        /QA
        /RE /RO /RS /RU /RW
        /SA /SB /SC /SD /SE /SG /SH /SI /SJ /SK /SL /SM /SN /SO /SR /SS /ST /SV /SX /SY /SZ
        /TC /TD /TF /TG /TH /TJ /TK /TL /TM /TN /TO /TR /TT /TV /TW /TZ
        /UA /UG /UM /US /UY /UZ
        /VA /VC /VE /VG /VI /VN /VU
        /WF /WS
        /YE /YT
        /ZA /ZM /ZW
    ] {dup} forall >> def
} ctxdef

    /lintiso3166alpha2 {
        iso3166alpha2 exch known not { pop /bwipp.GS1UnknownCountryAlpha (Unknown country alpha code) false exit } if
    } def

{
    /iso4217 << [
        /008 /012 /032 /036 /044 /048
        /050 /051 /052 /060 /064 /068 /072 /084 /090 /096
        /104 /108 /116 /124 /132 /136 /144
        /152 /156 /170 /174 /188 /191 /192
        /203 /208 /214 /222 /230 /232 /238 /242 /262 /270 /292
        /320 /324 /328 /332 /340 /344 /348
        /352 /356 /360 /364 /368 /376 /388 /392 /398
        /400 /404 /408 /410 /414 /417 /418
        /422 /426 /430 /434 /446
        /454 /458 /462 /480 /484 /496 /498
        /504 /512 /516 /524 /532 /533 /548
        /554 /558 /566 /578 /586 /590 /598
        /600 /604 /608 /634 /643 /646 /654 /682 /690 /694
        /702 /704 /706 /710 /728 /748
        /752 /756 /760 /764 /776 /780 /784 /788
        /800 /807 /818 /826 /834 /840 /858 /860 /882 /886
        /901 /925 /927 /928 /929 /930 /931 /932 /933 /934 /936 /938
        /940 /941 /943 /944 /946 /947 /948 /949
        /950 /951 /952 /953 /955 /956 /957 /958 /959
        /960 /961 /962 /963 /964 /965 /967 /968 /969
        /970 /971 /972 /973 /975 /976 /977 /978 /979
        /980 /981 /984 /985 /986 /990 /994 /997 /999
    ] {dup} forall >> def
} ctxdef

    /lintiso4217 {
        iso4217 exch known not { pop /bwipp.GS1UnknownCurrency (Unknown currency code) false exit } if
    } def

    /lintiso5218 {
        dup (0) ne exch dup (1) ne exch dup (2) ne exch (9) ne and and and {
            pop /bwipp.GS1biologicalSexCode (Invalid biological sex code) false exit
        } if
    } def

    /lintiban {
        dup length 4 le { pop pop /bwipp.GS1tooShort (IBAN too short) false exit } if
        dup true exch {
            1 string dup 0 4 -1 roll put
            (0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ)
            exch search not { pop pop false exit } if
            pop pop pop
        } forall
        not { pop /bwipp.GS1badIBANcharacter (Invalid IBAN character) false exit } if
        dup mark exch mark exch {} forall counttomark -4 roll counttomark array astore exch pop {
            48 sub dup 9 gt {7 sub dup 10 idiv exch 10 mod} if
        } forall counttomark array astore exch pop
        0 exch {exch 10 mul add 97 mod} forall
        1 ne { pop pop /bwipp.GS1badIBANchecksum (IBAN checksum incorrect) false exit } if
        0 2 getinterval lintiso3166alpha2
    } def

    /lintzero {
        (0) ne { pop /bwipp.GS1zeroRequired (Zero is required) false exit } if
    } def

    /lintnonzero {
        false exch { 48 ne {pop true} if } forall
        not { pop /bwipp.GS1zeroNotPermitted (Zero not permitted) false exit } if
    } def

    /lintnozeroprefix {
        dup length 1 gt exch 0 get 48 eq and {
            pop /bwipp.GS1badZeroPrefix (Zero prefix is not permitted) false exit
        } if
    } def

    /linthasnondigit {
        false exch { dup 48 lt exch 57 gt or {pop true exit} if } forall
        not { /bwipp.GS1requiresNonDigit (A non-digit character is required) false exit } if
    } def

    /linthyphen {
        (-) ne { pop /bwipp.GS1hyphenRequired (A hyphen is required) false exit } if
    } def

    /lintyyyymmd0 {
        dup 4 2 getinterval cvi dup 1 lt exch 12 gt or { pop /bwipp.GS1badMonth (Invalid month) false exit } if
        dup 0 4 getinterval cvi dup 400 mod 0 eq exch dup 4 mod 0 eq exch 100 mod 0 ne and or  % Leap year?
        [ 31  3 -1 roll {29} {28} ifelse  31 30 31 30 31 31 30 31 30 31 ]
        1 index 4 2 getinterval cvi 1 sub get
        exch 6 2 getinterval cvi lt { pop /bwipp.GS1badDay (Invalid day of month) false exit } if
    } def

    /lintyyyymmdd {
        dup length 8 ne { pop /bwipp.GS1badDateLength (Invalid length for yyyymmdd date) false exit } if
        dup 6 2 getinterval cvi 1 lt { pop /bwipp.GS1badDay (Invalid day of month) false exit } if
        lintyyyymmd0
    } def

    /lintyymmd0 {
        dup 0 2 getinterval cvi dup  21  sub  % Update 20YY periodically for century calculation
        dup 51 ge {pop (19)} { -50 le {(21)} {(20)} ifelse} ifelse exch pop  % Century prefix
        8 string dup 0 4 -1 roll putinterval dup 2 4 -1 roll putinterval
        lintyyyymmd0
    } def

    /lintyymmdd {
        dup length 6 ne { pop /bwipp.GS1badDateLength (Invalid length for yymmdd date) false exit } if
        dup 4 2 getinterval cvi 1 lt { pop /bwipp.GS1badDay (Invalid day of month) false exit } if
        lintyymmd0
    } def

    /lintyymmddhh {
        dup length 8 ne { pop /bwipp.GS1badYYMMDDHHLength (Invalid length for yymmdd date with hour) false exit } if
        dup 6 2 getinterval cvi 23 gt { pop pop /bwipp.GS1badHour (Invalid hour of day) false exit } if
        0 6 getinterval lintyymmdd
    } def

    /linthhmm {
        dup 0 2 getinterval cvi 23 gt { pop pop /bwipp.GS1badHour (Invalid hour of day) false exit } if
        2 2 getinterval cvi 59 gt { pop /bwipp.GS1badMinute (Invalid minute in the hour) false exit } if
    } def

    /lintmmoptss {
        dup length dup 2 ne exch 4 ne and {
            pop /bwipp.GS1badTimeLength (Invalid length for optional minutes and seconds) false exit
        } if
        dup 0 2 getinterval cvi 59 gt { pop pop /bwipp.GS1badMinute (Invalid minute in the hour) false exit } if
        dup length 4 ge {
            dup 2 2 getinterval cvi 59 gt { pop pop /bwipp.GS1badSecond (Invalid second in the minute) false exit } if
        } if
        pop
    } def

    /lintyesno {
        dup (0) ne exch (1) ne and {
            pop /bwipp.GS1badBoolean (Neither 0 nor 1 for yes or no) false exit
        } if
    } def

    /lintwinding {
        dup (0) ne exch dup (1) ne exch (9) ne and and {
            pop /bwipp.GS1badWinding (Invalid winding direction) false exit
        } if
    } def

    /lintpieceoftotal {
        dup length 2 mod 0 ne { pop pop /bwipp.GS1badPieceTotalLength (Invalid piece/total length) false exit } if
        dup dup length 2 idiv 0 exch getinterval cvi
        dup 0 eq { pop pop pop /bwipp.GS1badPieceNumber (Invalid piece number) false exit } if
        exch dup length 2 idiv dup getinterval cvi
        dup 0 eq { pop pop pop /bwipp.GS1badPieceTotal (Invalid total number) false exit } if
        gt { pop /bwipp.GS1pieceExceedsTotal (Piece number exceeds total) false exit } if
    } def

    /lintposinseqslash {
        (/) search not {
            pop /bwipp.invalidPosInSeqFormat (Invalid <pos>/<end> format) false exit
        } if
        exch pop
        dup length 0 eq {
            pop pop /bwipp.invalidPosInSeqFormat (Invalid <pos>/<end> format) false exit
        } if
        1 index length 0 eq {
            pop pop /bwipp.invalidPosInSeqFormat (Invalid <pos>/<end> format) false exit
        } if
        dup true exch {
            dup 48 lt exch 57 gt or { pop false exit } if
        } forall
        not { pop pop /bwipp.positionNotNumeric (Position is not numeric) false exit } if
        1 index true exch {
            dup 48 lt exch 57 gt or { pop false exit } if
        } forall
        not { pop pop /bwipp.endNotNumeric (End is not numeric) false exit } if
        dup 0 get 48 eq {pop pop /bwipp.positionZeroPrefix (Position cannot have zero prefix) false exit} if
        1 index 0 get 48 eq {pop pop /bwipp.endZeroPrefix (End cannot have zero prefix) false exit} if
        cvi exch cvi exch
        lt {/bwipp.positionExceedsEnd (Position exceeds end) false exit} if
    } def

    /lintpcenc {
        {
            (%) search not {pop exit} if
            pop pop dup length 2 lt { pop pop /bwipp.GS1badPercentEscape (Invalid % escape) false exit } if
            dup 0 2 getinterval true exch {
                1 string dup 0 4 -1 roll put
                (0123456789ABCDEFabcdef)
                exch search not { pop pop false exit } if
                pop pop pop
            } forall
            not { pop pop /bwipp.GS1badPercentChars (Invalid characters for percent encoding) false exit } if
        } loop
    } def

    /lintcouponcode {
        dup true exch {
            dup 48 lt exch 57 gt or { pop false exit } if
        } forall
        not { pop pop /bwipp.GS1couponNotNumeric (Coupon not numeric) false exit } if

        % GCP VLI and value
        dup length 1 lt {
            pop pop /bwipp.GS1couponTooShortGCPVLI (Coupon too short: Missing GCP VLI) false exit
        } if
        dup 0 1 getinterval cvi dup 6 gt {
            pop pop /bwipp.GS1couponBadGCPVLI (Coupon GCP length indicator must be 0-6) false exit
        } if
        6 add 1 add
        2 copy exch length gt {
            pop pop pop /bwipp.GS1couponTooShortGCP (Coupon too short: GCP truncated) false exit
        } if
        dup 2 index length exch sub getinterval

        % Offer Code
        dup length 6 lt {
            pop pop /bwipp.GS1couponTooShortOfferCode (Coupon too short: Offer Code truncated) false exit
        } if
        dup length 6 sub 6 exch getinterval

        % Save Value VLI and value
        dup length 1 lt {
            pop pop /bwipp.GS1couponTooShortSaveValueVLI (Coupon too short: Missing Save Value VLI) false exit
        } if
        dup 0 1 getinterval cvi dup dup 1 lt exch 5 gt or {
            pop pop /bwipp.GS1couponBadSaveValueVLI (Coupon Save Value length indicator must be 1-5) false exit
        } if
        1 add
        2 copy exch length gt {
            pop pop pop /bwipp.GS1couponTooShortSaveValue (Coupon too short: Save Value truncated) false exit
        } if
        dup 2 index length exch sub getinterval

        % 1st Purchase Requirement VLI and value
        dup length 1 lt {
            pop pop /bwipp.GS1couponTooShort1stPurchaseRequirementVLI (Coupon too short: Missing 1st Purchase Requirement VLI) false exit
        } if
        dup 0 1 getinterval cvi dup dup 1 lt exch 5 gt or {
            pop pop /bwipp.GS1couponBad1stPurchaseRequirementVLI (Coupon 1st Purchase Requirement length indicator must be 1-5) false exit
        } if
        1 add
        2 copy exch length gt {
            pop pop pop /bwipp.GS1couponTooShort1stPurchaseRequirement (Coupon too short: 1st Purchase Requirement truncated) false exit
        } if
        dup 2 index length exch sub getinterval

        % 1st Purchase Requirement Code
        dup length 1 lt {
            pop pop /bwipp.GS1couponTooShort1stPurchaseRequirementCode (Coupon too short: Missing 1st Purchase Requirement Code) false exit
        } if
        dup 0 1 getinterval cvi dup 4 gt exch 9 ne and {
            pop pop /bwipp.GS1couponBad1stPurchaseRequirementCode (Coupon 1st Purchase Requirement Code must be 0-4 or 9) false exit
        } if
        dup length 1 sub 1 exch getinterval

        % 1st Purchase Family Code
        dup length 3 lt {
            pop pop /bwipp.GS1couponTooShort1stPurchaseFamilyCode (Coupon too short: 1st Purchase Family Code truncated) false exit
        } if
        dup length 3 sub 3 exch getinterval

        % Optional field 1
        dup length 1 ge { dup 0 1 getinterval cvi 1 eq {
            1 dup 2 index length exch sub getinterval

            % Additional Purchase Rules Code
            dup length 1 lt {
                pop pop /bwipp.GS1couponTooShortAdditionalPurchaseRulesCode (Coupon too short: Missing Additional Purchase Rules Code) false exit
            } if
            dup 0 1 getinterval cvi 3 gt {
                pop pop /bwipp.GS1couponBadAdditionalPurchaseRulesCode (Coupon Additional Purchase Rules Code must be 0-3) false exit
            } if
            dup length 1 sub 1 exch getinterval

            % 2nd Purchase RequirementVLI and value
            dup length 1 lt {
                pop pop /bwipp.GS1couponTooShort2ndPurchaseRequirementVLI (Coupon too short: Missing 2nd Purchase Requirement VLI) false exit
            } if
            dup 0 1 getinterval cvi dup dup 1 lt exch 5 gt or {
                pop pop /bwipp.GS1couponBad2ndPurchaseRequirementVLI (Coupon 2nd Purchase Requirement length indicator must be 1-5) false exit
            } if
            1 add
            2 copy exch length gt {
                pop pop pop /bwipp.GS1couponTooShort2ndPurchaseRequirement (Coupon too short: 2nd Purchase Requirement truncated) false exit
            } if
            dup 2 index length exch sub getinterval

            % 2nd Purchase Requirement Code
            dup length 1 lt {
                pop pop /bwipp.GS1couponTooShort2ndPurchaseRequirementCode (Coupon too short: Missing 2nd Purchase Requirement Code) false exit
            } if
            dup 0 1 getinterval cvi dup 4 gt exch 9 ne and {
                pop pop /bwipp.GS1couponBad2ndPurchaseRequirementCode (Coupon 2nd Purchase Requirement Code must be 0-4 or 9) false exit
            } if
            dup length 1 sub 1 exch getinterval

            % 2nd Purchase Family Code
            dup length 3 lt {
                pop pop /bwipp.GS1couponTooShort2ndPurchaseFamilyCode (Coupon too short: 2nd Purchase Family Code truncated) false exit
            } if
            dup length 3 sub 3 exch getinterval

            % 2nd Purchase GCP VLI and value
            dup length 1 lt {
                pop pop /bwipp.GS1couponTooShort2ndPurchaseGCPVLI (Coupon too short: Missing 2nd Purchase GCP VLI) false exit
            } if
            dup 0 1 getinterval cvi dup dup 6 gt exch 9 ne and {
                pop pop /bwipp.GS1couponBad2ndPurchaseGCPVLI (Coupon 2nd Purchase GCP length indicator must be 0-6 or 9) false exit
            } if
            dup 9 ne {6 add} {pop 0} ifelse 1 add
            2 copy exch length gt {
                pop pop pop /bwipp.GS1couponTooShort2ndPurchaseGCP (Coupon too short: 2nd Purchase GCP truncated) false exit
            } if
            dup 2 index length exch sub getinterval

        } if } if

        % Optional field 2
        dup length 1 ge { dup 0 1 getinterval cvi 2 eq {
            1 dup 2 index length exch sub getinterval

            % 3rd Purchase RequirementVLI and value
            dup length 1 lt {
                pop pop /bwipp.GS1couponTooShort3rdPurchaseRequirementVLI (Coupon too short: Missing 3rd Purchase Requirement VLI) false exit
            } if
            dup 0 1 getinterval cvi dup dup 1 lt exch 5 gt or {
                pop pop /bwipp.GS1couponBad3rdPurchaseRequirementVLI (Coupon 3rd Purchase Requirement length indicator must be 1-5) false exit
            } if
            1 add
            2 copy exch length gt {
                pop pop pop /bwipp.GS1couponTooShort3rdPurchaseRequirement (Coupon too short: 3rd Purchase Requirement truncated) false exit
            } if
            dup 2 index length exch sub getinterval

            % 3rd Purchase Requirement Code
            dup length 1 lt {
                pop pop /bwipp.GS1couponTooShort3rdPurchaseRequirementCode (Coupon too short: Missing 3rd Purchase Requirement Code) false exit
            } if
            dup 0 1 getinterval cvi dup 4 gt exch 9 ne and {
                pop pop /bwipp.GS1couponBad3rdPurchaseRequirementCode (Coupon 3rd Purchase Requirement Code must be 0-4 or 9) false exit
            } if
            dup length 1 sub 1 exch getinterval

            % 3rd Purchase Family Code
            dup length 3 lt {
                pop pop /bwipp.GS1couponTooShort3rdPurchaseFamilyCode (Coupon too short: 3rd Purchase Family Code truncated) false exit
            } if
            dup length 3 sub 3 exch getinterval

            % 3rd Purchase GCP VLI and value
            dup length 1 lt {
                pop pop /bwipp.GS1couponTooShort3rdPurchaseGCPVLI (Coupon too short: Missing 3rd Purchase GCP VLI) false exit
            } if
            dup 0 1 getinterval cvi dup dup 6 gt exch 9 ne and {
                pop pop /bwipp.GS1couponBad3rdPurchaseGCPVLI (Coupon 3rd Purchase GCP length indicator must be 0-6 or 9) false exit
            } if
            dup 9 ne {6 add} {pop 0} ifelse 1 add
            2 copy exch length gt {
                pop pop pop /bwipp.GS1couponTooShort3rdPurchaseGCP (Coupon too short: 3rd Purchase GCP truncated) false exit
            } if
            dup 2 index length exch sub getinterval

        } if } if

        % Optional field 3
        /couponexpire -1 def
        dup length 1 ge { dup 0 1 getinterval cvi 3 eq {
            1 dup 2 index length exch sub getinterval

            % Expiration date
            dup length 6 lt {
                pop pop /bwipp.GS1couponTooShortExpirationDate (Coupon too short: Expiration date) false exit
            } if
            dup 2 2 getinterval cvi dup 1 lt exch 12 gt or { pop pop /bwipp.GS1couponExpirationDateBadMonth (Invalid month in expiration date) false exit } if
            dup 0 2 getinterval cvi dup 21 sub  % Update 20YY periodically for century calculation
            dup 51 ge {pop 1900 add} { -50 le {2100 add} {2000 add} ifelse} ifelse  % YYYY
            dup 400 mod 0 eq exch dup 4 mod 0 eq exch 100 mod 0 ne and or           % Leap year?
            [ 31  3 -1 roll {29} {28} ifelse  31 30 31 30 31 31 30 31 30 31 ]
            1 index 2 2 getinterval cvi 1 sub get
            1 index 4 2 getinterval cvi dup 3 1 roll lt
            exch 1 lt or { pop pop /bwipp.GS1couponExpirationDateBadDay (Invalid day of month in expiration date) false exit } if
            dup 0 6 getinterval cvi /couponexpire exch def
            dup length 6 sub 6 exch getinterval

        } if } if

        % Optional field 4
        dup length 1 ge { dup 0 1 getinterval cvi 4 eq {
            1 dup 2 index length exch sub getinterval

            % Start date
            dup length 6 lt {
                pop pop /bwipp.GS1couponTooShortStartDate (Coupon too short: Start date) false exit
            } if
            dup 2 2 getinterval cvi dup 1 lt exch 12 gt or { pop pop /bwipp.GS1couponStartDateBadMonth (Invalid month in start date) false exit } if
            dup 0 2 getinterval cvi dup 21 sub  % Update 20YY periodically for century calculation
            dup 51 ge {pop 1900 add} { -50 le {2100 add} {2000 add} ifelse} ifelse  % YYYY
            dup 400 mod 0 eq exch dup 4 mod 0 eq exch 100 mod 0 ne and or           % Leap year?
            [ 31  3 -1 roll {29} {28} ifelse  31 30 31 30 31 31 30 31 30 31 ]
            1 index 2 2 getinterval cvi 1 sub get
            1 index 4 2 getinterval cvi dup 3 1 roll lt
            exch 1 lt or { pop pop /bwipp.GS1couponStartDateBadDay (Invalid day of month in start date) false exit } if
            dup 0 6 getinterval cvi /couponstart exch def
            couponexpire -1 ne couponexpire couponstart lt and {
                pop pop /bwipp.GS1couponExpireDateBeforeStartDate (Coupon expires before it starts) false exit
            } if
            dup length 6 sub 6 exch getinterval

        } if } if

        % Optional field 5
        dup length 1 ge { dup 0 1 getinterval cvi 5 eq {
            1 dup 2 index length exch sub getinterval

            % Serial Number VLI and value
            dup length 1 lt {
                pop pop /bwipp.GS1couponTooShortSerialNumberVLI (Coupon too short: Missing Serial Number VLI) false exit
            } if
            dup 0 1 getinterval cvi 6 add 1 add
            2 copy exch length gt {
                pop pop pop /bwipp.GS1couponTooShortSerialNumber (Coupon too short: Serial Number truncated) false exit
            } if
            dup 2 index length exch sub getinterval

        } if } if

        % Optional field 6
        dup length 1 ge { dup 0 1 getinterval cvi 6 eq {
            1 dup 2 index length exch sub getinterval

            % Retailer GCP/GLN VLI and value
            dup length 1 lt {
                pop pop /bwipp.GS1couponTooShortRetailerGCPGLNVLI (Coupon too short: Missing Retailer GCP/GLN VLI) false exit
            } if
            dup 0 1 getinterval cvi dup dup 1 lt exch 7 gt or {
                pop pop /bwipp.GS1couponBadRetailerGCPGLNVLI (Coupon Retailer GCP/GLN length indicator must be 1-7) false exit
            } if
            6 add 1 add
            2 copy exch length gt {
                pop pop pop /bwipp.GS1couponTooShortRetailerGCPGLN (Coupon too short: Retailer GCP/GLN truncated) false exit
            } if
            dup 2 index length exch sub getinterval

        } if } if

        % Optional field 9
        dup length 1 ge { dup 0 1 getinterval cvi 9 eq {
            1 dup 2 index length exch sub getinterval

            % Save Value Code
            dup length 1 lt {
                pop pop /bwipp.GS1couponTooShortSaveValueCode (Coupon too short: Missing Save Value Code) false exit
            } if
            dup 0 1 getinterval cvi dup 6 gt exch dup 3 eq exch 4 eq or or {
                pop pop /bwipp.GS1couponBadSaveValueCode (Coupon Save Value Code must be 0,1,2,5 or 6) false exit
            } if
            dup length 1 sub 1 exch getinterval

            % Save Value Applies to Item
            dup length 1 lt {
                pop pop /bwipp.GS1couponTooShortSaveValueAppliesToItem (Coupon too short: Missing Save Value Applies to Item) false exit
            } if
            dup 0 1 getinterval cvi 2 gt {
                pop pop /bwipp.GS1couponBadSaveValueAppliesToItem (Coupon Save Value Applies to Item must be 0-2) false exit
            } if
            dup length 1 sub 1 exch getinterval

            % Store Coupon Flag
            dup length 1 lt {
                pop pop /bwipp.GS1couponTooShortStoreCouponFlag (Coupon too short: Missing Store Coupon Flag) false exit
            } if
            dup length 1 sub 1 exch getinterval

            % Don't Multiply Flag
            dup length 1 lt {
                pop pop /bwipp.GS1couponTooShortDontMultiplyFlag (Coupon too short: Missing Don't Multiply Flag) false exit
            } if
            dup 0 1 getinterval cvi 1 gt {
                pop pop /bwipp.GS1couponBadDontMultiplyFlag (Don't Multiply Flag must be 0 or 1) false exit
            } if
            dup length 1 sub 1 exch getinterval

        } if } if

        dup length 0 ne {
            pop pop /bwipp.GS1couponUnrecognisedOptionalField (Coupon fields must be 1,2,3,4,5,6 or 9, increasing order) false exit
        } if
        pop
    } def

    /lintcouponposoffer {
        dup true exch {
            dup 48 lt exch 57 gt or { pop false exit } if
        } forall
        not { pop pop /bwipp.GS1couponNotNumeric (Coupon not numeric) false exit } if
        % Format Code
        dup length 1 lt {
            pop pop /bwipp.GS1couponTooShortFormatCode (Coupon too short: Missing Format Code) false exit
        } if
        dup 0 1 getinterval dup (0) ne exch (1) ne and {
            pop pop /bwipp.GS1couponBadFormatCode (Coupon format must be 0 or 1) false exit
        } if
        dup length 1 sub 1 exch getinterval
        % Funder ID VLI and Funder ID
        dup length 1 lt {
            pop pop /bwipp.GS1couponTooShortFunderVLI (Coupon too short: Missing Funder VLI) false exit
        } if
        dup 0 1 getinterval cvi dup 6 gt {
            pop pop pop /bwipp.GS1couponBadFunderVLI (Coupon Funder length indicator must be 0-6) false exit
        } if
        6 add 1 add
        2 copy exch length gt {
            pop pop pop /bwipp.GS1couponTooShortFunder (Coupon too short: Truncated Funder ID) false exit
        } if
        dup 2 index length exch sub getinterval
        % Offer Code
        dup length 6 lt {
            pop pop /bwipp.GS1couponTooShortOfferCode (Coupon too short: Truncated Offer Code) false exit
        } if
        dup length 6 sub 6 exch getinterval
        % Serial Number VLI and Serial Number
        dup length 1 lt {
            pop pop /bwipp.GS1couponTooShortSnVLI (Coupon too short: Missing SN VLI) false exit
        } if
        dup 0 1 getinterval cvi
        6 add 1 add
        2 copy exch length gt {
            pop pop pop /bwipp.GS1couponTooShortSn (Coupon too short: Truncated SN) false exit
        } if
        dup 2 index length exch sub getinterval
        dup length 0 ne {
            pop pop /bwipp.GS1couponTooLong (Coupon too long) false exit
        } if
        pop
    } def

    /lintlatitude {
        dup length 10 ne {
            pop /bwipp.GS1badLatitudeLength (Invalid length for a latitude) false exit
        } if
        cvi
        (1800000000) cvi  % Workaround issue with packager
        gt { pop /bwipp.GS1badLatitude (Invalid value for latitude) false exit } if
    } def

    /lintlongitude {
        dup length 10 ne {
            pop /bwipp.GS1badLongitudeLength (Invalid length for a longitude) false exit
        } if
        % Workaround issue with packager
        cvi
        (3600000000) cvi  % Workaround issue with packager
        gt { pop /bwipp.GS1badLongitude (Invalid value for longitude) false exit } if
    } def

{
    /aidcmediatype << [
        /01 /02 /03 /04 /05 /06 /07 /08 /09 /10
        /80 /81 /82 /83 /84 /85 /86 /87 /88 /89
        /90 /91 /92 /93 /94 /95 /96 /97 /98 /99
    ] {dup} forall >> def
} ctxdef

    /lintmediatype {
        aidcmediatype exch known not { pop /bwipp.GS1UnknownMediaType (Unknown AIDC media type) false exit } if
    } def

    dontlint not {

        % Validate AI contents
        true
        0 1 vals length 1 sub {
            dup ais exch get /ai exch def
            vals exch get /val exch def
            gs1syntax ai known {
                gs1syntax ai get /parts get
                % Overall length checks, e.g. to report "too long", not "checksum failure"
                dup 0 exch {dup /opt get {pop 0} {/min get} ifelse add} forall val length gt {
                    pop /bwipp.GS1valueTooShort (Too short) false exit
                } if
                dup 0 exch {/max get add} forall val length lt {
                    pop /bwipp.GS1valueTooLong (Too long) false exit
                } if
                {  % Checks for each component of the AI
                    /props exch def
                    props /max get val length 2 copy gt {exch} if pop
                    val exch 0 exch getinterval /eval exch def
                    /val val eval length dup val length exch sub getinterval def
                    eval length 0 eq {
                        props /opt get not {
                            pop /bwipp.GS1valueTooShort (Too short) false exit
                        } if
                    } {
                        eval length props /min get lt {
                            pop /bwipp.GS1valueTooShort (Too short) false exit
                        } if
                        << /N /lintnumeric  /X /lintcset82  /Y /lintcset39  /Z /lintcset64 >>
                        props /cset get get eval exch load exec
                        props /linters get { eval exch load exec } forall
                    } ifelse
                } forall
                dup not {exit} if
                val length 0 ne {  % Not all data consumed by components
                    pop /bwipp.GS1valueTooLong (Too long) false exit
                } if
            } {
                pop /bwipp.GS1unknownAI (Unrecognised AI) false exit
            } ifelse
        } for
        not {
            dup length ai length add 5 add string
            dup 0 (AI ) putinterval
            dup 3 ai putinterval
            dup 3 ai length add (: ) putinterval
            dup 5 ai length add 4 -1 roll putinterval
            //raiseerror exec
        } if

        % Search for "patt" matching an AIs, excluding "this" AI
        /aiexists {
            /this exch def
            /patt exch def
            1 {  % common exit
                aivals patt known {true exit} if  % Fast path
                patt length 4 eq {
                    patt 3 1 getinterval (n) eq {
                        /pfxlen patt 2 1 getinterval (n) eq {2} {3} ifelse def
                        false
                        ais {
                            dup dup this ne exch length 4 eq and {
                                0 pfxlen getinterval patt 0 pfxlen getinterval eq {
                                    pop true
                                } if
                            } {
                                pop
                            } ifelse
                        } forall
                        exit
                    } if
                    false exit
                } if
                false exit
            } repeat
        } def

        % Build AI dict and validate repeats
        /aivals vals length dict def
        0 1 vals length 1 sub {
            dup ais exch get /ai exch def
            vals exch get /val exch def
            aivals ai known {
                aivals ai get val ne {
                    ai length 40 add string
                    dup 0 (Repeated AIs \() putinterval
                    dup 14 ai putinterval
                    dup 14 ai length add (\) must have the same value) putinterval
                    /bwipp.GS1repeatedDifferingAIs exch //raiseerror exec
                } if
            } {
                aivals ai val put
            } ifelse
        } for

        % Validate ex and req pairings
        0 1 vals length 1 sub {
            ais exch get /ai exch def
            gs1syntax ai get /ex 2 copy known {
                get {
                    /patt exch def
                    patt ai aiexists {
                        ai length patt length add 36 add string
                        dup 0 (AIs \() putinterval
                        dup 5 ai putinterval
                        dup 5 ai length add (\) and \() putinterval
                        dup 12 ai length add patt putinterval
                        dup 12 ai length add patt length add (\) are mutually exclusive) putinterval
                        /bwipp.GS1exclusiveAIs exch //raiseerror exec
                    } if
                } forall
            } {
                pop pop
            } ifelse
            lintreqs {
                gs1syntax ai get /req 2 copy known {
                    get {                % For each req attribute instance
                        false exch {     % And each AI sequence alternative
                            true exch {  % Check whether all AIs in the sequence are present
                                ai aiexists not {pop false} if
                            } forall
                            { pop true exit } if  % Wholly matching any of the alternatives is sufficient
                        } forall
                        not {
                            [
                                gs1syntax ai get /req get
                                { { { (+) } forall pop ( OR ) } forall pop ( WITH ) } forall pop
                            ] dup 0 exch {length add} forall
                            ai length 49 add dup 3 -1 roll add string exch 3 -1 roll {
                                dup length 2 index add
                                3 index 4 2 roll putinterval
                            } forall pop
                            dup 0 (One of more requisite AIs for AI \() putinterval
                            dup 34 ai putinterval
                            dup 34 ai length add (\) are missing: ) putinterval
                            /bwipp.GS1missingAIs exch //raiseerror exec
                        } if
                    } forall
                } {
                    pop pop
                } ifelse
            } if
        } for

    } if  % dontlint

    ais vals fncs

    //unloadctx exec

    end

}
[/barcode] {null def} forall
bind def
/gs1process dup load /uk.co.terryburton.bwipp defineresource pop
end
/setpacking where {pop setpacking} if
% --END RESOURCE gs1process--
