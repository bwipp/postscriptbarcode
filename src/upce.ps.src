% Barcode Writer in Pure PostScript
% https://bwipp.terryburton.co.uk
%
% Copyright (c) 2004-2024 Terry Burton
%
% $Id$
%
% Permission is hereby granted, free of charge, to any
% person obtaining a copy of this software and associated
% documentation files (the "Software"), to deal in the
% Software without restriction, including without
% limitation the rights to use, copy, modify, merge,
% publish, distribute, sublicense, and/or sell copies of
% the Software, and to permit persons to whom the Software
% is furnished to do so, subject to the following
% conditions:
%
% The above copyright notice and this permission notice
% shall be included in all copies or substantial portions
% of the Software.
%
% THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
% KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO
% THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
% PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
% THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
% DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
% CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
% CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
% IN THE SOFTWARE.

% --BEGIN ENCODER upce--
% --REQUIRES preamble loadctx unloadctx raiseerror processoptions renlinear ean5 ean2--
% --DESC: UPC-E
% --EXAM: 01234558
% --EXOP: includetext
% --RNDR: renlinear
/setpacking where {pop currentpacking true setpacking} if
10 dict
dup /loadctx dup /uk.co.terryburton.bwipp findresource put
dup /unloadctx dup /uk.co.terryburton.bwipp findresource put
dup /raiseerror dup /uk.co.terryburton.bwipp findresource put
dup /processoptions dup /uk.co.terryburton.bwipp findresource put
dup /renlinear dup /uk.co.terryburton.bwipp findresource put
dup /ean2 dup /uk.co.terryburton.bwipp findresource put
dup /ean5 dup /uk.co.terryburton.bwipp findresource put
begin
/upce {

    20 dict begin

    /ctx null def
    /dontdraw false def
    /includetext false def               % Enable/disable text
    /textfont /Helvetica def
    /textsize 12.0 def
    /textxoffset -9.0 def
    /textyoffset -4.0 def
    /height 1.0 def
    /addongap 12.0 def
    /addontextfont (unset) def
    /addontextsize null def     % sentinal realtype
    /addontextxoffset null def  % sentinal realtype
    /addontextyoffset null def  % sentinal realtype

    //processoptions exec /options exch def
    /barcode exch def

    /upce //loadctx exec

    % Split off the addon
    barcode ( ) search {
        /barcode exch def
        pop
        /addon exch def
    } {
        pop
        /addon () def
    } ifelse

    % Compress a given UPC-A
    barcode length 11 eq barcode length 12 eq or {
        % Validate the input
        barcode {
            dup 48 lt exch 57 gt or {
                /bwipp.upcEupcAbadCharacter (UPC-A must contain only digits) //raiseerror exec
            } if
        } forall
        1 {  % Common exit
            /upcecode barcode length 12 eq {8} {7} ifelse string def
            barcode 3 get 48 sub 2 le barcode 4 4 getinterval (0000) eq and {
                upcecode 0 barcode  0 3 getinterval putinterval
                upcecode 3 barcode  8 3 getinterval putinterval
                upcecode 6 barcode  3 1 getinterval putinterval
                exit
            } if
            barcode 4 5 getinterval (00000) eq {
                upcecode 0 barcode  0 4 getinterval putinterval
                upcecode 4 barcode  9 2 getinterval putinterval
                upcecode 6 (3) putinterval
                exit
            } if
            barcode 5 5 getinterval (00000) eq {
                upcecode 0 barcode  0 5 getinterval putinterval
                upcecode 5 barcode 10 1 getinterval putinterval
                upcecode 6 (4) putinterval
                exit
            } if
            barcode 10 get 48 sub 5 ge barcode 6 4 getinterval (0000) eq and {
                upcecode 0 barcode  0 6 getinterval putinterval
                upcecode 6 barcode 10 1 getinterval putinterval
                exit
            } if
            /bwipp.upcEupcAnotCompressible (UPC-A cannot be converted to a UPC-E) //raiseerror exec
        } repeat
        barcode length 12 eq {
            upcecode 7 barcode 11 1 getinterval putinterval
        } if
        /barcode upcecode def
    } if

    % Validate the input
    barcode length 7 ne barcode length 8 ne and {
        /bwipp.upcEbadLength (UPC-E must be 7 or 8 digits) //raiseerror exec
    } if
    barcode {
        dup 48 lt exch 57 gt or {
            /bwipp.upcEbadCharacter (UPC-E must contain only digits) //raiseerror exec
        } if
    } forall
    addon length 0 ne addon length 2 ne and addon length 5 ne and {
        /bwipp.upcEbadAddOnLength (Add-on for UPC-E must be 2 or 5 digits) //raiseerror exec
    } if

    % Ensure 0 or 1 number systems
    barcode 0 get dup 48 ne exch 49 ne and {
        /bwipp.upcEbadNumberSystem (UPC-E must have number system 0 or 1) //raiseerror exec
    } if

{
    % Create an array containing the character mappings
    /encs
    [ (3211) (2221) (2122) (1411) (1132)
      (1231) (1114) (1312) (1213) (3112)
      (111) (111111)
    ] def

    % Create a string of the available characters
    /barchars (0123456789) def

    /mirrormaps
    [ (000111) (001011) (001101) (001110) (010011)
      (011001) (011100) (010101) (010110) (011010)
    ] def
} ctxdef

    % Derive the equivalent UPC-A for its checksum
    1 {  % Common exit
        /upcacode 11 string def
        barcode 6 get 48 sub 2 le {
            upcacode 0 barcode 0 3 getinterval putinterval
            upcacode 3 barcode 6 1 getinterval putinterval
            upcacode 4 (0000) putinterval
            upcacode 8 barcode 3 3 getinterval putinterval
            exit
        } if
        barcode 6 get 48 sub 3 eq {
            upcacode 0 barcode 0 4 getinterval putinterval
            upcacode 4 (00000) putinterval
            upcacode 9 barcode 4 2 getinterval putinterval
            exit
        } if
        barcode 6 get 48 sub 4 eq {
            upcacode 0 barcode 0 5 getinterval putinterval
            upcacode 5 (00000) putinterval
            upcacode 10 barcode 5 1 getinterval putinterval
            exit
        } if
        barcode 6 get 48 sub 5 ge {
            upcacode 0 barcode 0 6 getinterval putinterval
            upcacode 6 (0000) putinterval
            upcacode 10 barcode 6 1 getinterval putinterval
            exit
        } if
    } repeat
    /checksum 0 def
    0 1 10 {
       /i exch def
       /barchar upcacode i get 48 sub def
       i 2 mod 0 ne {
           /checksum checksum barchar add def
       } {
           /checksum checksum barchar 3 mul add def
       } ifelse
    } for
    /checksum 10 checksum 10 mod sub 10 mod def
    barcode length 8 eq {
        barcode 7 get checksum 48 add ne {
            /bwipp.upcEbadCheckDigit (Incorrect UPC check digit provided) //raiseerror exec
        } if
    } if
    /pad 8 string def
    pad 0 barcode putinterval       % Add barcode to the start of the pad
    pad 7 checksum 48 add put       % Put ascii for checksum at end of pad
    /barcode pad def
    /txt 8 array def
    txt 0 [barcode 0 1 getinterval textxoffset textyoffset textfont textsize 2 sub] put

    % Determine the mirror map based on checksum
    /mirrormap mirrormaps checksum get def

    % Invert the mirrormap if we are using a non-zero number system
    barcode 0 get 48 eq {
        /invt mirrormap length string def
        0 1 mirrormap length 1 sub {
            /i exch def
            mirrormap i get 48 eq {
                invt i 49 put
            } {
                invt i 48 put
            } ifelse
        } for
        /mirrormap invt def
    } if

    /sbs 33 string def

    % Put the start character
    sbs 0 encs 10 get putinterval

    1 1 6 {
        /i exch def
        % Lookup the encoding for the each barcode character
        barcode i 1 getinterval barchars exch search
        pop                            % Discard true leaving pre
        length /indx exch def          % indx is the length of pre
        pop pop                        % Discard seek and post
        /enc encs indx get def         % Get the indxth encoding
        mirrormap i 1 sub get 49 eq {  % Reverse enc if 1 in this position in mirrormap
            /enclen enc length def
            /revenc enclen string def
            0 1 enclen 1 sub {
                /j exch def
                /char enc j get def
                revenc enclen j sub 1 sub char put
            } for
            /enc revenc def
        } if
        sbs i 1 sub 4 mul 3 add enc putinterval   % Put encoded digit into sbs
        txt i [barcode i 1 getinterval i 1 sub 7 mul 13 add textxoffset add textyoffset textfont textsize] put
    } for

    txt 7 [barcode 7 1 getinterval 6 7 mul 21 add textxoffset add textyoffset textfont textsize 2 sub] put

    % Put the end character
    sbs 27 encs 11 get putinterval

    /sbs [sbs {48 sub} forall] def
    includetext {
        /bhs [height height 12{height .075 sub}repeat height height height] def
        /bbs [0 0 12{.075}repeat 0 0 0] def
    } {
        /bhs [17{height}repeat] def
        /bbs [17{0}repeat] def
        /txt [] def
    } ifelse
    /guardrightypos 0.0 def

    % Append the addon
    addon () ne {
        /addopts <<
            /dontdraw true
            /includetext true
            /height height includetext { 0.15 sub } if
            /textxoffset addontextxoffset null ne {addontextxoffset} {51 addongap add} ifelse
            addontextyoffset null ne {/textyoffset addontextyoffset} if
            /textsize addontextsize null ne {addontextsize} {textsize} ifelse
            /textfont addontextfont (unset) ne {addontextfont} {textfont} ifelse
        >> def
        addon length 2 eq {addon addopts //ean2 exec} if
        addon length 5 eq {addon addopts //ean5 exec} if
        /addcode exch def
        /sbs [sbs aload pop addongap addcode (sbs) get aload pop] def
        /bhs [bhs aload pop addcode (bhs) get aload pop] def
        /bbs [bbs aload pop addcode (bbs) get aload pop] def
        /txt [txt aload pop addcode (txt) get aload pop] def
        /guardrightypos height 72 mul 6 sub def
    } if

    % Return the arguments
    <<
    /ren /renlinear
    /sbs sbs
    /bhs bhs
    /bbs bbs
    /txt txt
    /opt options
    /guardrightpos addon () eq {9.0} {5.0} ifelse
    /guardrightypos guardrightypos
    /borderleft 9.0
    /borderright addon () eq {9.0} {5.0} ifelse
    /bordertop 0.0
    /borderbottom 5.0
    >>

    dontdraw not //renlinear if

    //unloadctx exec

    end

}
[/barcode] {null def} forall
bind def
/upce dup load /uk.co.terryburton.bwipp defineresource pop
end
/setpacking where {pop setpacking} if
% --END ENCODER upce--
