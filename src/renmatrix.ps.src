% Barcode Writer in Pure PostScript
% https://bwipp.terryburton.co.uk
%
% Copyright (c) 2004-2024 Terry Burton
%
% $Id$
%
% Permission is hereby granted, free of charge, to any
% person obtaining a copy of this software and associated
% documentation files (the "Software"), to deal in the
% Software without restriction, including without
% limitation the rights to use, copy, modify, merge,
% publish, distribute, sublicense, and/or sell copies of
% the Software, and to permit persons to whom the Software
% is furnished to do so, subject to the following
% conditions:
%
% The above copyright notice and this permission notice
% shall be included in all copies or substantial portions
% of the Software.
%
% THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
% KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO
% THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
% PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
% THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
% DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
% CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
% CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
% IN THE SOFTWARE.

% --BEGIN RENDERER renmatrix--
% --REQUIRES preamble raiseerror processoptions--
/setpacking where {pop currentpacking true setpacking} if
10 dict
dup /raiseerror dup /uk.co.terryburton.bwipp findresource put
dup /processoptions dup /uk.co.terryburton.bwipp findresource put
begin
/renmatrix {

    20 dict begin

    % Default options
    /width 1.0 def
    /height 1.0 def
    /barcolor (unset) def
    /backgroundcolor (unset) def
    /bordercolor (unset) def
    /colormap (unset) def
    /dotty false def
    /inkspread null def    % real sentinal
    /inkspreadh null def   % real sentinal
    /inkspreadv null def   % real sentinal
    /txt [] def
    /includetext false def
    /textcolor (unset) def
    /textxalign (unset) def
    /textyalign (unset) def
    /textdirection (forward) def
    /textfont (Courier) def
    /textsize 10.0 def
    /textxoffset 0.0 def
    /textyoffset 0.0 def
    /textgaps 0.0 def
    /textlinegaps 1.2 def
    /alttext () def
    /alttextsplit () def
    /alttextsubspace () def
    /extratext () def
    /extratextsubspace () def
    /extratextsplit () def
    /extratextlinegaps 1.2 def
    /extratextcolor (unset) def
    /extratextxalign (left) def
    /extratextyalign (above) def
    /extratextdirection (forward) def
    /extratextfont (Courier) def
    /extratextsize 10.0 def
    /extratextxoffset 0.0 def
    /extratextyoffset 0.0 def
    /extratextgaps 0.0 def
    /showborder false def
    /borderleft 0.0 def
    /borderright 0.0 def
    /bordertop 0.0 def
    /borderbottom 0.0 def
    /borderwidth 0.25 def

    {def} forall
    opt currentdict /opt undef //processoptions exec pop

    inkspread null eq {/inkspread 0.15 def} if
    inkspreadh null eq {/inkspreadh inkspread def} if
    inkspreadv null eq {/inkspreadv inkspread def} if

    /uk.co.terryburton.bwipp.global_ctx dup where {
        exch get /ctx exch def
        barcolor        (unset) eq { ctx /default_barcolor        2 copy known {get /barcolor        exch def} {pop pop} ifelse } if
        backgroundcolor (unset) eq { ctx /default_backgroundcolor 2 copy known {get /backgroundcolor exch def} {pop pop} ifelse } if
        bordercolor     (unset) eq { ctx /default_bordercolor     2 copy known {get /bordercolor     exch def} {pop pop} ifelse } if
    } { pop } ifelse

    % Input validation

    textxalign (unset) ne {
        << /offleft dup  /left dup  /center dup  /right dup  /offright dup >> textxalign known not {
            /bwipp.renmatrixBadTextxalign (textxalign must be offleft, left, center, right or offright) //raiseerror exec
        } if
    } if

    textyalign (unset) ne {
        << /above dup  /top dup  /center dup  /bottom dup  /below dup >> textyalign known not {
            /bwipp.renmatrixBadTextyalign (textyalign must be above, top, center, bottom or below) //raiseerror exec
        } if
    } if

    << /forward dup  /backward dup  /upward dup  /downward dup >> textdirection known not {
        /bwipp.renmatrixBadTextdirection (textdirection must be forward, backward, upward or downward) //raiseerror exec
    } if

    textsize 0 le textsize 25 ge or {
        /bwipp.renmatrixBadTextsize (textsize must be greater than zero and less that 25) //raiseerror exec
    } if

    << /offleft dup  /left dup  /center dup  /right dup  /offright dup >> extratextxalign known not {
        /bwipp.renmatrixBadExtratextxalign (extratextxalign must be offleft, left, center, right or offright) //raiseerror exec
    } if

    << /above dup  /top dup  /center dup  /bottom dup  /below dup >> extratextyalign known not {
        /bwipp.renmatrixBadExtratextyalign (extratextyalign must be above, top, center, bottom or below) //raiseerror exec
    } if

    << /forward dup  /backward dup  /upward dup  /downward dup >> extratextdirection known not {
        /bwipp.renmatrixBadExtratextdirection (extratextdirection must be forward, backward, upward or downward) //raiseerror exec
    } if

    extratextsize 0 le extratextsize 25 ge or {
        /bwipp.renmatrixBadTextsize (extratextsize must be greater than zero and less that 25) //raiseerror exec
    } if

    /xyget { pixx mul add pixs exch get} def
    /cget { pixx mul add cache exch get and} def
    /cput {  % Optimise by only storing "stem" corners
        dup 4 mod 0 eq { % dir is up or left
            3 1 roll pixx mul add cache exch 2 copy get 4 -1 roll or put
        } {
            pop pop pop
        } ifelse
    } def

    /abcd {
        4 string 0 [
            5 -2 roll
            pixx mul add dup
            pixs exch 2 getinterval aload pop 3 -1 roll  % A B
            pixs exch pixx add 2 getinterval aload pop   % C D
        ] {3 copy 48 add put pop 1 add} forall pop
    } def

    /right {dir 1 ne {x y dir cput [x y]} if  /x x 1 add def  /dir 1 def} def
    /down  {dir 2 ne {x y dir cput [x y]} if  /y y 1 add def  /dir 2 def} def
    /left  {dir 4 ne {x y dir cput [x y]} if  /x x 1 sub def  /dir 4 def} def
    /up    {dir 8 ne {x y dir cput [x y]} if  /y y 1 sub def  /dir 8 def} def

    /trace {
        % Walk the outline of a region emitting edge coordinates of the path
        /y exch def  /x exch def
        % dir 1:right 2:down 4:left 8:up
        /dir x 1 add y 1 add xyget 1 eq {8} {4} ifelse def
        /sx x def  /sy y def  /sdir dir def

        % A B
        % C D
        mark {
            x y abcd
            1 {  % Common exit
                dup dup (0001) eq exch dup (0011) eq exch (1011) eq or or {pop right exit} if
                dup dup (0010) eq exch dup (1010) eq exch (1110) eq or or {pop down  exit} if
                dup dup (1000) eq exch dup (1100) eq exch (1101) eq or or {pop left  exit} if
                dup dup (0100) eq exch dup (0101) eq exch (0111) eq or or {pop up    exit} if
                dup (1001) eq {
                    dir 2 eq {pop left exit} {pop right exit} ifelse
                } {  % 0110
                    dir 1 eq {pop down exit} {pop up exit} ifelse
                } ifelse
            } repeat
            x sx eq y sy eq and dir sdir eq and {exit} if
        } loop
        counttomark array astore exch pop

    } def

    % Set RGB or CMYK color, or some other color by name
    /setanycolor {
        /anycolor exch def
        anycolor length 1 lt {
            /bwipp.colorEnpty (Colors must not be empty) //raiseerror exec
        } if
        anycolor 0 get 95 ne {  % RGB or CMYK
            anycolor length dup 6 ne exch 8 ne and {
                /bwipp.colorBadLength (Colors must be 6 or 8 hexadecimal characters or a defined name beginning with underscore) //raiseerror exec
            } if
            mark
            0 2 anycolor length 1 sub {
                anycolor exch 2 getinterval 0 exch {
                    dup dup 48 ge exch  57 le and {48 sub} {  % 0-9
                    dup dup 65 ge exch  70 le and {55 sub} {  % A-F
                    dup dup 97 ge exch 102 le and {87 sub} {  % a-f
                        cleartomark /bwipp.colorBadCharacter (RGB and CMYK Colors must be in hexadecimal notation) //raiseerror exec
                    } ifelse } ifelse } ifelse
                    exch 16 mul add
                } forall
                255 div
            } for
            counttomark
            dup 3 eq { /DeviceRGB } { /DeviceCMYK } ifelse
            exch 2 add -1 roll pop  % clear mark
        } {  % Named color beginning "_..."
            /uk.co.terryburton.bwipp.global_ctx dup where {exch get} {0 dict} ifelse
            /named_colors 2 copy known {get} {pop pop 0 dict} ifelse
            anycolor 2 copy known not {
                pop pop /bwipp.colorUnknown (Color is not defined) //raiseerror exec
            } if
            get mark exch aload pop counttomark 1 add -2 roll exch pop
        } ifelse
        { setcolorspace setcolor } stopped {
            /bwipp.colorFailedToSet (Failed to set color) //raiseerror exec
        } if
    } def

    % Plot a layer of single colour
    /drawlayer {

        /pixsorig pixs def
        /pixs exch def

        % Pad the bitmap on all sides
        /pixs [
            pixx 2 add {0} repeat
            0 pixx pixs length 1 sub {
                0 exch
                pixs exch pixx getinterval aload pop
                0
            } for
            pixx 2 add {0} repeat
        ] def
        /pixx pixx 2 add def
        /pixy pixy 2 add def

        % Cache of visited corners for each direction
        /cache [ pixs length {0} repeat ] def

        % Construct paths by tracing regions avoiding duplication by using the cache
        /paths [
            0 1 pixy 2 sub {
                /j exch def
                0 1 pixx 2 sub {
                    /i exch def
                    /k i j abcd def
                    k (0001) eq k (1001) eq or {  % Black region stem corners
                        8 i j cget 0 eq {
                            i j trace
                        } if
                    } if
                    k (1110) eq {  % White region stem corner
                        4 i j cget 0 eq {
                            i j trace
                        } if
                    } if
                } for
            } for
        ] def

        % Revert the bitmap size
        /pixx pixx 2 sub def
        /pixy pixy 2 sub def

        % Draw the image
        newpath
        paths {
            /p exch def
            /len p length def
            p len 1 sub get aload pop
            p 0 get aload pop
            0 1 len 1 sub {                                % x1 y1 x2 y2
                /i exch def
                p i 1 add len mod get aload pop 6 -2 roll  % x3 y3 x1 y1 x2 y2
                5 index inkspreadh
                4 index 4 -1 roll lt {add} {sub} ifelse    % y3<y1 ? x2+i : x2-i
                4 1 roll
                4 index inkspreadv
                4 index 4 -1 roll gt {add} {sub} ifelse    % x3>x1 ? y2+i : y2-i
                4 -1 roll exch pixy exch sub
                i 0 eq {moveto} {lineto} ifelse
            } for                                          % x2 y2 x3 y3
            closepath
            pop pop pop pop
        } forall
        fill

        /pixs pixsorig def

    } def

    /drawlayerdots {

        /pixsorig pixs def
        /pixs exch def

        newpath
        0 1 pixs length 1 sub {
            dup pixx mod /x exch def
            pixx idiv /y exch def
            x y xyget 1 eq {
               x 0.5 add pixy y sub 0.5 sub moveto
               x 0.5 add pixy y sub 0.5 sub 0.5 inkspread sub 0 360 arc
            } if
        } for
        fill

        /pixs pixsorig def

    } def

    gsave

    currentpoint translate

    /inkspread  inkspread  2 div def
    /inkspreadh inkspreadh 2 div def
    /inkspreadv inkspreadv 2 div def

    % Force symbol to given width
    width pixx div 72 mul height pixy div 72 mul scale

    % Display the border and background
    showborder {
        /tl [ borderleft borderwidth 2 div add neg        pixy bordertop add borderwidth 2 div add ] def
        /tr [ pixx borderright add borderwidth 2 div add  pixy bordertop add borderwidth 2 div add ] def
        /bl [ borderleft borderwidth 2 div add neg        borderbottom borderwidth 2 div add neg   ] def
        /br [ pixx borderright add borderwidth 2 div add  borderbottom borderwidth 2 div add neg   ] def
    } {  % No need to extend background when there is no border
        /tl [ borderleft neg inkspread add                pixy bordertop add inkspread sub         ] def
        /tr [ pixx borderright add inkspread sub          pixy bordertop add inkspread sub         ] def
        /bl [ borderleft neg inkspread add                borderbottom neg inkspread add           ] def
        /br [ pixx borderright add inkspread sub          borderbottom neg inkspread add           ] def
    } ifelse
    backgroundcolor (unset) ne {
        gsave
        newpath bl aload pop moveto [ br tr tl ] { aload pop lineto } forall closepath
        backgroundcolor setanycolor fill
        grestore
    } if
    showborder {
        gsave
        newpath bl aload pop moveto [ br tr tl ] { aload pop lineto } forall closepath
        bordercolor (unset) ne { bordercolor setanycolor } if
        borderwidth inkspread 2 mul sub setlinewidth stroke
        grestore
    } if

    % Display the matrix
    colormap (unset) eq {
        /colormap << 1 barcolor >> def
    } if

    colormap {
        dup (unset) ne { setanycolor } { pop } ifelse
        /key exch def
        [
            pixs { key eq {1} {0} ifelse } forall
        ] dotty {drawlayerdots} {drawlayer} ifelse
    } forall

    /positions <<
    %   direction
    %       x-align                                y-align
        (forward) <<
            (offleft)  {      tw neg nudge sub }   (below)   {      th neg nudge sub }
            (left)     {      0                }   (bottom)  {      0                }
            (xcenter)  { pixx tw sub 2 div     }   (ycenter) { pixy th sub 2 div     }
            (right)    { pixx tw sub           }   (top)     { pixy th sub           }
            (offright) { pixx        nudge add }   (above)   { pixy        nudge add }
        >>
        (backward) <<
            (offleft)  {      0      nudge sub }   (below)   {      0      nudge sub }
            (left)     {      tw               }   (bottom)  {      th               }
            (xcenter)  { pixx tw add 2 div     }   (ycenter) { pixy th add 2 div     }
            (right)    { pixx                  }   (top)     { pixy                  }
            (offright) { pixx tw add nudge add }   (above)   { pixy th add nudge add }
        >>
        (upward) <<
            (offleft)  {      0      nudge sub }   (below)   {      tw neg nudge sub }
            (left)     {      th               }   (bottom)  {      0                }
            (xcenter)  { pixx th add 2 div     }   (ycenter) { pixy tw sub 2 div     }
            (right)    { pixx                  }   (top)     { pixy tw sub           }
            (offright) { pixx th add nudge add }   (above)   { pixy        nudge add }
        >>
        (downward) <<
            (offleft)  {      th neg nudge sub }   (below)   {      0      nudge sub }
            (left)     {      0                }   (bottom)  {      tw               }
            (xcenter)  { pixx th sub 2 div     }   (ycenter) { pixy tw add 2 div     }
            (right)    { pixx th sub           }   (top)     { pixy                  }
            (offright) { pixx        nudge add }   (above)   { pixy tw add nudge add }
        >>
    >> def

    % x-align y-align direction text-width text-height
    /positiontext {
        /th exch def
        /tw exch def
        /nudge 1 def
        positions exch get dup
        4 -1 roll dup (center) eq {pop (xcenter)} if get exec exch
        3 -1 roll dup (center) eq {pop (ycenter)} if get exec
    } def

    % Display the text for elements in the text array
    includetext {

        textcolor (unset) ne { textcolor setanycolor } if

        textxalign (unset) eq textyalign (unset) eq and alttext () eq and {
            /s 0 def /fn () def
            txt {
                aload pop
                2 copy s ne exch fn ne or {
                    dup 0 le {
                        pop pop pop pop pop
                        /bwipp.renmatrixFontTooSmall (The font size is too small) //raiseerror exec
                    } if
                    2 copy /s exch def /fn exch def
                    selectfont
                } {
                    pop pop
                } ifelse
                moveto show
            } forall
        } {

            alttext () eq {
                /txt [ txt { 0 get {} forall } forall ] def
                /tstr txt length string def
                0 1 txt length 1 sub { dup txt exch get tstr 3 1 roll put } for
            } {
                /tstr alttext def
                0 1 alttext length 1 sub {
                    dup
                    alttext exch 1 getinterval alttextsubspace exch search {
                        alttext 4 index 32 put pop pop
                    } if
                    pop pop
                } for
            } ifelse

            alttext () ne alttextsplit () ne and {
                alttextsplit length 1 ne {
                    /bwipp.alttextsplitBad (The alttextsplit option must be a single character) //raiseerror exec
                } if
                /textlines [
                    tstr { alttextsplit search { exch pop exch } { exit } ifelse } loop
                ] def
            } {
                /textlines [ tstr ] def
            } ifelse

            textfont textsize selectfont

            % Find true ascent of font
            tstr length 0 eq {
                0
            } {
                gsave
                newpath 0 0 moveto (0) false charpath pathbbox
                4 1 roll pop pop pop
                grestore
                currentfont /PaintType known {currentfont /PaintType get 2 eq} {false} ifelse
                currentfont /StrokeWidth known and {
                    currentfont /StrokeWidth get 2 div 0 exch
                    currentfont /FontMatrix get dtransform
                    dup mul exch dup mul add sqrt
                    add
                } if
            } ifelse
            /textascent exch def

            /textwidth 0 textlines { stringwidth pop 2 copy lt {exch} if pop } forall tstr length 1 sub textgaps mul add def
            /textheight textlines length dup textascent mul exch 1 sub textlinegaps mul add def

            textxalign (unset) eq { /textxalign (center) def } if
            textyalign (unset) eq { /textyalign (below)  def } if

            textxalign (justify) eq {
                textdirection (forward) ne textdirection (backward) ne and {
                    /bwipp.textxjustify (textxalign=justify requires forward or backward text) //raiseerror exec
                } if
                textwidth pixx lt {
                    /textgaps pixx textwidth sub tstr length 1 sub div def
                    /textxalign textdirection (forward) eq { (left) } { (right) } ifelse def
                } {
                    /textgaps 0.0 def
                    /textxalign (center) def
                } ifelse
            } if

            textyalign (justify) eq {
                textdirection (upward) ne textdirection (downward) ne and {
                    /bwipp.textyjustify (textyalign=justify requires upward or downward text) //raiseerror exec
                } if
                textwidth pixy lt {
                    /textgaps pixy textwidth sub tstr length 1 sub div def
                    /textyalign textdirection (upward) eq { (bottom) } { (top) } ifelse def
                } {
                    /textgaps 0.0 def
                    /textyalign (center) def
                } ifelse
            } if

            textxalign textyalign textdirection textwidth textheight positiontext moveto
            textxoffset textyoffset rmoveto
            gsave
            << (forward) 0  (upward) 90  (backward) 180  (downward) 270 >> textdirection get rotate
            currentpoint translate
            0 1 textlines length 1 sub {
                /i exch def
                0 0 textascent textlinegaps add i mul add moveto
                textgaps 0 textlines dup length i sub 1 sub get ashow
            } for
            grestore

        } ifelse

    } if

    % Render any extratext
    extratext () ne {

        0 1 extratext length 1 sub {
            dup
            extratext exch 1 getinterval extratextsubspace exch search {
                extratext 4 index 32 put pop pop
            } if
            pop pop
        } for

        extratextsplit () ne {
            extratextsplit length 1 ne {
                /bwipp.extratextsplitBad (The extratextsplit option must be a single character) //raiseerror exec
            } if
            /textlines [
                extratext { extratextsplit search { exch pop exch } { exit } ifelse } loop
            ] def
        } {
            /textlines [ extratext ] def
        } ifelse

        extratextcolor (unset) ne { extratextcolor setanycolor } if
        extratextfont extratextsize selectfont

        % Find true ascent of font
        gsave
        newpath 0 0 moveto (0) false charpath pathbbox
        4 1 roll pop pop pop
        grestore
        currentfont /PaintType known {currentfont /PaintType get 2 eq} {false} ifelse
        currentfont /StrokeWidth known and {
            currentfont /StrokeWidth get 2 div 0 exch
            currentfont /FontMatrix get dtransform
            dup mul exch dup mul add sqrt
            add
        } if
        /textascent exch def

        /textwidth 0 textlines { stringwidth pop 2 copy lt {exch} if pop } forall extratext length 1 sub extratextgaps mul add def
        /textheight textlines length dup textascent mul exch 1 sub extratextlinegaps mul add def

        extratextxalign (justify) eq {
            extratextdirection (forward) ne extratextdirection (backward) ne and {
                /bwipp.extratextxjustify (extratextxalign=justify requires forward or backward text) //raiseerror exec
            } if
            textwidth pixx lt {
                /extratextgaps pixx textwidth sub extratext length 1 sub div def
                /extratextxalign extratextdirection (forward) eq { (left) } { (right) } ifelse def
            } {
                /extratextgaps 0.0 def
                /extratextxalign (center) def
            } ifelse
        } if

        extratextyalign (justify) eq {
            extratextdirection (upward) ne extratextdirection (downward) ne and {
                /bwipp.extratextyjustify (extratextyalign=justify requires upward or downward text) //raiseerror exec
            } if
            textwidth pixy lt {
                /extratextgaps pixy textwidth sub extratext length 1 sub div def
                /extratextyalign extratextdirection (upward) eq { (bottom) } { (top) } ifelse def
            } {
                /extratextgaps 0.0 def
                /extratextyalign (center) def
            } ifelse
        } if

        extratextxalign extratextyalign extratextdirection textwidth textheight positiontext moveto
        extratextxoffset extratextyoffset rmoveto
        gsave
        << (forward) 0  (upward) 90  (backward) 180  (downward) 270 >> extratextdirection get rotate
        currentpoint translate
        0 1 textlines length 1 sub {
            /i exch def
            0 0 textascent extratextlinegaps add i mul add moveto
            extratextgaps 0 textlines dup length i sub 1 sub get ashow
        } for
        grestore

    } if

    grestore

    end

}
[/barcode] {null def} forall
bind def
/renmatrix dup load /uk.co.terryburton.bwipp defineresource pop
end
/setpacking where {pop setpacking} if
% --END RENDERER renmatrix--
