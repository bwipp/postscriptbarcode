% Barcode Writer in Pure PostScript
% https://bwipp.terryburton.co.uk
%
% Copyright (c) 2004-2024 Terry Burton
%
% $Id$
%
% Permission is hereby granted, free of charge, to any
% person obtaining a copy of this software and associated
% documentation files (the "Software"), to deal in the
% Software without restriction, including without
% limitation the rights to use, copy, modify, merge,
% publish, distribute, sublicense, and/or sell copies of
% the Software, and to permit persons to whom the Software
% is furnished to do so, subject to the following
% conditions:
%
% The above copyright notice and this permission notice
% shall be included in all copies or substantial portions
% of the Software.
%
% THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
% KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO
% THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
% PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
% THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
% DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
% CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
% CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
% IN THE SOFTWARE.

% --BEGIN ENCODER gs1-128composite--
% --REQUIRES preamble loadctx unloadctx raiseerror processoptions parseinput gs1process renlinear renmatrix code128 gs1-128 micropdf417 pdf417 gs1-cc--
% --DESC: GS1-128 Composite
% --EXAM: (00)095287654321012346|(02)09521234543213(37)24(10)1234567ABCDEFG
% --EXOP: ccversion=c
% --RNDR: renlinear renmatrix
/setpacking where {pop currentpacking true setpacking} if
10 dict
dup /raiseerror dup /uk.co.terryburton.bwipp findresource put
dup /processoptions dup /uk.co.terryburton.bwipp findresource put
dup /gs1-128 dup /uk.co.terryburton.bwipp findresource put
dup /gs1-cc dup /uk.co.terryburton.bwipp findresource put
dup /gs1process dup /uk.co.terryburton.bwipp findresource put
dup /renlinear dup /uk.co.terryburton.bwipp findresource put
dup /renmatrix dup /uk.co.terryburton.bwipp findresource put
begin
/gs1-128composite {

    20 dict begin            % Confine variables to local scope

    /ctx null def
    /dontdraw false def
    /usematrix false def
    /parse false def
    /dontlint false def
    /lintreqs true def

    //processoptions exec /options exch def
    /barcode exch def

    dontdraw { /usematrix true def } if

    % Split the linear and composite parts
    barcode (|) search {
        /linear exch def
        pop
        /comp exch def
    } {
        pop /bwipp.missingCompositeComponent (A Composite Component must be provided following a pipe character) //raiseerror exec
    } ifelse

    usematrix not { gsave } if

    options (inkspreadv) 0.0 put
    options (dontdraw) true put
    options (dontlint) true put

    % Lint the combined AI element strings
    linear length comp length add string
    dup 0 linear putinterval
    dup linear length comp putinterval
    /ai //gs1process exec pop pop pop

    % Dummy plot of linear part with CC-A to get width
    options (linkagea) true put
    linear << options {} forall >> //gs1-128 exec
    (sbs) get 0 exch {add} forall /linwidth exch def

    % Create 2D part and determine type
    options (lintype) (gs1-128) put
    options (linwidth) linwidth put
    comp << options {} forall >> //gs1-cc exec /compsym exch def
    compsym (pixx) get 99 eq {(a)} {(c)} ifelse /linktype exch def
    compsym (borderbottom) 0 put

    % Plot linear part
    linktype (a) eq {
        options (linkagea) true put
        options (linkagec) false put
    } {
        options (linkagea) false put
        options (linkagec) true put
    } ifelse
    linear << options {} forall >> //gs1-128 exec
    dup (sbs) get /linsbs exch def
    dup (bhs) get 0 get 72 mul /linheight exch def
    usematrix not { //renlinear exec } { pop } ifelse

    % Plot the separator
    mark
    1 linsbs {1 index 0 eq {{1}} {{0}} ifelse repeat} forall
    counttomark 1 sub array astore /sep exch def pop pop

    % Plot the 2D part
    linktype (a) eq {
        /s linwidth 2 sub 11 idiv def
        /p s 9 sub 2 idiv def
        /x s p sub 1 sub 11 mul 10 add p 0 eq {2 add} if 99 sub def
    } {
        /x -7 def
    } ifelse

    usematrix not {

        currentpoint

        x linheight 1 add rmoveto compsym //renmatrix exec

        linheight add moveto <<
            /ren /renmatrix
            /pixs sep
            /pixx sep length
            /pixy 1
            /height 1 72 div
            /width sep length 72 div
            /opt options
        >> //renmatrix exec

        grestore
    } {
        /ccpixs compsym /pixs get def
        /ccpixx compsym /pixx get def

        /linpixs [
            linsbs { 1 index 1 eq {{0}} {{1}} ifelse repeat } forall  % Alternates i 1/0's (linsbs always begins with "2")
        ] def

        x 0 gt {  % Left pad composite
            /cclpad [ x {0} repeat ] def
            /linlpad 0 array def
        } {  % Left pad linear
            /cclpad 0 array def
            /linlpad [ x neg {0} repeat ] def
        } ifelse

        /diff linwidth ccpixx x add sub def
        diff 0 gt {  % Right pad composite
            /ccrpad [ diff {0} repeat ] def
            /linrpad 0 array def
        } {  % Right pad linear
            /ccrpad 0 array def
            /linrpad [ diff neg {0} repeat ] def
        } ifelse

        /linheight linheight cvi def
        /pixs [
            0 ccpixx ccpixs length 1 sub {
                /i exch def
                cclpad aload pop ccpixs i ccpixx getinterval aload pop ccrpad aload pop
            } for
            linlpad aload pop sep aload pop linrpad aload pop
            linheight { linlpad aload pop linpixs aload pop linrpad aload pop } repeat
        ] def

        /pixx cclpad length ccpixx add ccrpad length add def
        /pixy pixs length pixx idiv def
        <<
        /ren /renmatrix
        /pixs pixs
        /pixx pixx
        /pixy pixy
        /height pixy 72 div
        /width pixx 72 div
        /opt options
        >>

        dontdraw not {
            gsave
            //renmatrix exec
            grestore
        } if
    } ifelse

    end

}
[/barcode] {null def} forall
bind def
/gs1-128composite dup load /uk.co.terryburton.bwipp defineresource pop
end
/setpacking where {pop setpacking} if
% --END ENCODER gs1-128composite--
