%!PS

/_isEqual {
    2 copy type exch type ne {/testError pstack quit} if
    dup type dup /arraytype eq exch /stringtype eq or {
        2 copy
        length exch length ne {/testError pstack quit} if
        dup length 1 sub 0 exch 1 exch {
            dup 3 index exch get exch 2 index exch get ne {/testError pstack quit} if
        } for
    } {
        2 copy ne {/testError pstack quit}
    } ifelse
    pop pop
} bind def

/_isError {
    exch pop
    2 copy ne {/testError pstack quit} if
    pop pop
} bind def

/_debugIsEqual {
    2 copy
    length exch length ne {/testError pstack quit} if
    dup length 1 sub 0 exch 1 exch {
        dup 3 index exch get exch 2 index exch get ne {/testError pstack quit} if
    } for
    pop
    pop pop
} bind def

/_doTest {
  /test exch def
  /expect exch def
  /cmd exch def
  /cds countdictstack def
  /testStart /cmd load  % Put useful debugging info on stack
  0 dict begin
  {
      cmd exec
  } stopped {
      $error /errorname get     % Put error details on the stack
      $error /errorname () put  % and clear the error dictionary
      $error /errorinfo get
      $error /errorinfo () put
  } if
  end
  expect /test load exec
  clear                                % Clear the operand stack
  countdictstack cds sub {end} repeat  % Pop any stray dicts from the dictstack
} bind def

/isEqual { //_isEqual //_doTest exec } def
/isError { //_isError //_doTest exec } def
/debugIsEqual { //_debugIsEqual //_doTest exec } def

[
    (../../../tests/ps_tests/parseinput.ps)
    (../../../tests/ps_tests/gs1process.ps)
    (../../../tests/ps_tests/gs1processdl.ps)
    (../../../tests/ps_tests/azteccode.ps)
    (../../../tests/ps_tests/bc412.ps)
    (../../../tests/ps_tests/codablockf.ps)
    (../../../tests/ps_tests/code128.ps)
    (../../../tests/ps_tests/code16k.ps)
    (../../../tests/ps_tests/code93ext.ps)
    (../../../tests/ps_tests/codeone.ps)
    (../../../tests/ps_tests/databarexpanded.ps)
    (../../../tests/ps_tests/databarexpandedcomposite.ps)
    (../../../tests/ps_tests/databarexpandedstacked.ps)
    (../../../tests/ps_tests/databarexpandedstackedcomposite.ps)
    (../../../tests/ps_tests/databarlimited.ps)
    (../../../tests/ps_tests/databarlimitedcomposite.ps)
    (../../../tests/ps_tests/databaromni.ps)
    (../../../tests/ps_tests/databaromnicomposite.ps)
    (../../../tests/ps_tests/databarstacked.ps)
    (../../../tests/ps_tests/databarstackedcomposite.ps)
    (../../../tests/ps_tests/databarstackedomni.ps)
    (../../../tests/ps_tests/databarstackedomnicomposite.ps)
    (../../../tests/ps_tests/databartruncated.ps)
    (../../../tests/ps_tests/databartruncatedcomposite.ps)
    (../../../tests/ps_tests/datamatrix.ps)
    (../../../tests/ps_tests/dotcode.ps)
    (../../../tests/ps_tests/ean13.ps)
    (../../../tests/ps_tests/ean13composite.ps)
    (../../../tests/ps_tests/ean8.ps)
    (../../../tests/ps_tests/ean8composite.ps)
    (../../../tests/ps_tests/gs1-128.ps)
    (../../../tests/ps_tests/gs1-128composite.ps)
    (../../../tests/ps_tests/gs1-cc.ps)
    (../../../tests/ps_tests/gs1datamatrix.ps)
    (../../../tests/ps_tests/gs1northamericancoupon.ps)
    (../../../tests/ps_tests/micropdf417.ps)
    (../../../tests/ps_tests/microqrcode.ps)
    (../../../tests/ps_tests/msi.ps)
    (../../../tests/ps_tests/pdf417.ps)
    (../../../tests/ps_tests/pdf417compact.ps)
    (../../../tests/ps_tests/qrcode.ps)
    (../../../tests/ps_tests/rectangularmicroqrcode.ps)
    (../../../tests/ps_tests/ultracode.ps)
    (../../../tests/ps_tests/upca.ps)
    (../../../tests/ps_tests/upcacomposite.ps)
    (../../../tests/ps_tests/upce.ps)
    (../../../tests/ps_tests/upcecomposite.ps)
] { 1 dict begin run end } forall

(%stdout) (w) file dup (\nPASS\n) writestring dup flushfile
