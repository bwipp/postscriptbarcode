<?php
/*
    Copy and paste output of

    php contrib/development/build-qr-mode-optim-arrs.php

    into src/qrcode.ps after comment line

    % Generated by contrib/development/build-qr-mode-optim-arrs.php
*/

$basename = basename(__FILE__);
$dirname = dirname(__FILE__);

/* Helper to print out array */
function print_arr($name, $arr, $use_given = false) {
    // Existing values for  Full      Micro        Changed values
    $given = array(
        'mode0forceKB'  => ' 1  1  1  e e 1 1',
        'mode0forceA'   => ' 1  1  1  e 1 1 1',

        'mode0KbeforeB' => ' 5  5  6  e e 2 3', // Re-using modeBKbeforeE so not used

        'mode0AbeforeB' => ' 6  7  8  e e 3 4', // Re-using modeBAbeforeE so not used

        'mode0NbeforeB' => ' 4  4  5  e e 2 3',
        'mode0NbeforeA' => ' 7  8  9  e 3 4 5', // Re-using modeANbeforeE so not used

        'modeBKbeforeB' => ' 9 12 13  e e 4 5', //  9 12 13  e e 4 6
        'modeBKbeforeA' => ' 9 10 12  e e 4 5', //  8 10 11  e e 4 5 (including A after switch)
        'modeBKbeforeN' => ' 9 10 11  e e 5 6', //  8  9 11  e e 3 5 (including N after switch)
        'modeBKbeforeE' => ' 4  5  6  e e 2 3', //  5  5  6  e e 2 3

        'modeBAbeforeK' => '11 12 14  e e 5 7',
        'modeBAbeforeB' => '11 15 16  e e 6 7',
        'modeBAbeforeN' => '12 13 15  e e 6 8',
        'modeBAbeforeE' => ' 6  7  8  e e 3 4',

        'modeBNbeforeK' => ' 6  7  8  e e 3 4',
        'modeBNbeforeB' => ' 6  8  9  e e 3 4',
        'modeBNbeforeA' => ' 6  7  8  e e 3 4',
        'modeBNbeforeE' => ' 3  4  5  e e 2 3', //  3  4  4  e e 2 3

        'modeANbeforeA' => '13 15 17  e 5 7 9',
        'modeANbeforeB' => '13 17 18  e e 7 9',
        'modeANbeforeE' => ' 7  8  9  e 3 4 5',
    );
    $lens = array( // Spacings
    //  Full     Micro       R7             R9             R11               R13               R15            R17
        2, 3, 3, 3, 2, 2, 2, 3, 2, 2, 2, 2, 3, 2, 2, 2, 3, 4, 2, 2, 2, 3, 3, 4, 2, 2, 3, 3, 3, 4, 3, 3, 3, 3, 4, 3, 3, 3, 3
    );
    $len_b = 0;

    print '    /' . str_pad($name, 13, ' ', STR_PAD_RIGHT) . ' [';
    if ($use_given) {
        print $given[$name];
        $len_b = 7;
        array_splice($arr, 0, 7);
    }
    foreach ($arr as $i => $j) {
        print str_pad($j == -1 ? 'e' : $j, $lens[$len_b + $i], ' ', STR_PAD_LEFT);
    }
    print '] def' . PHP_EOL;
}

/* Helper to set array using function args and then call `print_arr()` */
function set_and_print_arr($name, $jmax, $qr_func, $mqr_e_func, $mqr_func, $rmqr_func, $use_given = false) {
    global $basename;

    $arr = array();
    for ($i = 0; $i < 3; $i++) {
        for ($j = 1; $j < $jmax; $j++) {
            if ($qr_func($i, $j)) {
                $arr[] = $j;
                break;
            }
        }
        if ($j == $jmax) {
            exit("$basename:" . __LINE__ . " ERROR: $name i:$i j == $j" . PHP_EOL);
        }
    }
    for ($i = 0; $i < 4; $i++) {
        if ($mqr_e_func($i)) {
            $arr[] = -1;
        } else {
            for ($j = 1; $j < $jmax; $j++) {
                if ($mqr_func($i, $j)) {
                    $arr[] = $j;
                    break;
                }
            }
            if ($j == $jmax) {
                exit("$basename:" . __LINE__ . " ERROR: $name i:$i j == $j" . PHP_EOL);
            }
        }
    }
    for ($i = 0; $i < 32; $i++) {
        for ($j = 1; $j < $jmax; $j++) {
            if ($rmqr_func($i, $j)) {
                $arr[] = $j;
                break;
            }
        }
        if ($j == $jmax) {
            exit("$basename:" . __LINE__ . " ERROR: $name i:$i j == $j" . PHP_EOL);
        }
    }
    print_arr($name, $arr, $use_given);
}

define('QR_N', 0);
define('QR_A', 1);
define('QR_B', 2);
define('QR_K', 3);

$qr = array( // QR mode indicator + character count indicator
    //        1-9   10-26   27-40
    array( 4 + 10, 4 + 12, 4 + 14 ), // QR_N
    array( 4 +  9, 4 + 11, 4 + 13 ), // QR_A
    array( 4 +  8, 4 + 16, 4 + 16 ), // QR_B
    array( 4 +  8, 4 + 10, 4 + 12 ), // QR_K
);

$mqr = array( // Micro QR mode indicator + character count indicator
    //        M1     M2     M3     M4
    array( 0 + 3, 1 + 4, 2 + 5, 3 + 6 ), // QR_N
    array(    -1, 1 + 3, 2 + 4, 3 + 5 ), // QR_A
    array(    -1,    -1, 2 + 4, 3 + 5 ), // QR_B
    array(    -1,    -1, 2 + 3, 3 + 4 ), // QR_K
);

/* Based on ISO/IEC JTC1/SC31N000 (Draft 2019-6-24) */
$rmqr = array( // rMQR mode indicator + character count indicator
    array( // QR_N
        3 + 4, 3 + 5, 3 + 6, 3 + 7, 3 + 7,
        3 + 5, 3 + 6, 3 + 7, 3 + 7, 3 + 8,
        3 + 4, 3 + 6, 3 + 7, 3 + 7, 3 + 8, 3 + 8,
        3 + 5, 3 + 6, 3 + 7, 3 + 7, 3 + 8, 3 + 8,
        3 + 7, 3 + 7, 3 + 8, 3 + 8, 3 + 9,
        3 + 7, 3 + 8, 3 + 8, 3 + 8, 3 + 9
    ),
    array( // QR_A
        3 + 3, 3 + 5, 3 + 5, 3 + 6, 3 + 6,
        3 + 5, 3 + 5, 3 + 6, 3 + 6, 3 + 7,
        3 + 4, 3 + 5, 3 + 6, 3 + 6, 3 + 7, 3 + 7,
        3 + 5, 3 + 6, 3 + 6, 3 + 7, 3 + 7, 3 + 8,
        3 + 6, 3 + 7, 3 + 7, 3 + 7, 3 + 8,
        3 + 6, 3 + 7, 3 + 7, 3 + 8, 3 + 8
    ),
    array( // QR_B
        3 + 3, 3 + 4, 3 + 5, 3 + 5, 3 + 6,
        3 + 4, 3 + 5, 3 + 5, 3 + 6, 3 + 6,
        3 + 3, 3 + 5, 3 + 5, 3 + 6, 3 + 6, 3 + 7,
        3 + 4, 3 + 5, 3 + 6, 3 + 6, 3 + 7, 3 + 7,
        3 + 6, 3 + 6, 3 + 7, 3 + 7, 3 + 7,
        3 + 6, 3 + 6, 3 + 7, 3 + 7, 3 + 8
    ),
    array( // QR_K
        3 + 2, 3 + 3, 3 + 4, 3 + 5, 3 + 5,
        3 + 3, 3 + 4, 3 + 5, 3 + 5, 3 + 6,
        3 + 2, 3 + 4, 3 + 5, 3 + 5, 3 + 6, 3 + 6,
        3 + 3, 3 + 5, 3 + 5, 3 + 6, 3 + 6, 3 + 7,
        3 + 5, 3 + 5, 3 + 6, 3 + 6, 3 + 7,
        3 + 5, 3 + 6, 3 + 6, 3 + 6, 3 + 7
    ),
);

/* Number of bits each mode takes to encode X characters of that type */
define('BITS_CHAR_MAX', 42);
$bits = array( array(), array(), array(), array() );
for ($i = 0; $i < BITS_CHAR_MAX / 3; $i++) {
    $bits[QR_N][] = 10 * $i;
    $bits[QR_N][] = 10 * $i + 4;
    $bits[QR_N][] = 10 * $i + 7;
}
for ($i = 0; $i < BITS_CHAR_MAX; $i++) {
    $bits[QR_A][] = 11 * ($i >> 1) + 6 * ($i & 1);
    $bits[QR_B][] = 8 * $i;
    $bits[QR_K][] = 13 * $i;
}

// Begin

print '    %                Full     Micro    R7         R9           R11             R13              R15             R17' . PHP_EOL;

$arr = array(); /* mode0forceKB */
for ($i = 0; $i < 3; $i++) $arr[] = 1;
for ($i = 0; $i < 4; $i++) $arr[] = $mqr[QR_K][$i] == -1 || $mqr[QR_B][$i] == -1 ? -1 : 1;
for ($i = 0; $i < 32; $i++) $arr[] = 1;
print_arr('mode0forceKB', $arr);

$arr = array(); /* mode0forceA */
for ($i = 0; $i < 3; $i++) $arr[] = 1;
for ($i = 0; $i < 4; $i++) $arr[] = $mqr[QR_A][$i] == -1 ? -1 : 1;
for ($i = 0; $i < 32; $i++) $arr[] = 1;
print_arr('mode0forceA', $arr);

$arr = array(); /* mode0forceN */
for ($i = 0; $i < 3; $i++) $arr[] = 1;
for ($i = 0; $i < 4; $i++) $arr[] = 1;
for ($i = 0; $i < 32; $i++) $arr[] = 1;
print_arr('mode0forceN', $arr);
print PHP_EOL;

/* mode0KbeforeB same as modeBKbeforeE so omit */

/* mode0AbeforeB same as modeBAbeforeE so omit */

/* Note if didn't use <= for modeBNbeforeE qr case then could re-use modeBNbeforeE and omit following */
set_and_print_arr('mode0NbeforeB', BITS_CHAR_MAX,
    function($i, $j) use ($qr, $bits) {
        return $qr[QR_N][$i] + $bits[QR_N][$j] < $bits[QR_B][$j];
    }, function ($i) use ($mqr) {
        return $mqr[QR_N][$i] == -1 || $mqr[QR_B][$i] == -1;
    }, function ($i, $j) use ($mqr, $bits) {
        return $mqr[QR_N][$i] + $bits[QR_N][$j] < $bits[QR_B][$j];
    }, function ($i, $j) use ($rmqr, $bits) {
        return $rmqr[QR_N][$i] + $bits[QR_N][$j] < $bits[QR_B][$j];
    }
);
/* mode0NbeforeA same as modeANbeforeE so omit */
print PHP_EOL;

set_and_print_arr('modeBKbeforeB', BITS_CHAR_MAX / 2,
    function($i, $j) use ($qr, $bits) {
        return $qr[QR_K][$i] + $bits[QR_K][$j] + $qr[QR_B][$i] < $bits[QR_B][$j * 2];
    }, function ($i) use ($mqr) {
        return $mqr[QR_B][$i] == -1 || $mqr[QR_K][$i] == -1;
    }, function ($i, $j) use ($mqr, $bits) {
        return $mqr[QR_K][$i] + $bits[QR_K][$j] + $mqr[QR_B][$i] < $bits[QR_B][$j * 2];
    }, function ($i, $j) use ($rmqr, $bits) {
        return $rmqr[QR_K][$i] + $bits[QR_K][$j] + $rmqr[QR_B][$i] < $bits[QR_B][$j * 2];}
);
set_and_print_arr('modeBKbeforeA', BITS_CHAR_MAX / 2,
    function($i, $j) use ($qr, $bits) {
        /* Note as A can be B including 1st A after switch also (ditto for mqr and rmqr) */
        return $qr[QR_K][$i] + $bits[QR_K][$j] + $qr[QR_A][$i] + $bits[QR_A][1] < $bits[QR_B][$j * 2 + 1];
    }, function ($i) use ($mqr) {
        return $mqr[QR_B][$i] == -1 || $mqr[QR_K][$i] == -1 || $mqr[QR_A][$i] == -1;
    }, function ($i, $j) use ($mqr, $bits) {
        return $mqr[QR_K][$i] + $bits[QR_K][$j] + $mqr[QR_A][$i] + $bits[QR_A][1] < $bits[QR_B][$j * 2 + 1];
    }, function ($i, $j) use ($rmqr, $bits) {
        return $rmqr[QR_K][$i] + $bits[QR_K][$j] + $rmqr[QR_A][$i] + $bits[QR_A][1] < $bits[QR_B][$j * 2 + 1];
    }
);
set_and_print_arr('modeBKbeforeN', BITS_CHAR_MAX / 2,
    function($i, $j) use ($qr, $bits) {
        /* Note as N can be B including 1st N after switch also (ditto for mqr and rmqr) */
        return $qr[QR_K][$i] + $bits[QR_K][$j] + $qr[QR_N][$i] + $bits[QR_N][1] < $bits[QR_B][$j * 2 + 1];
    }, function ($i) use ($mqr) {
        return $mqr[QR_B][$i] == -1 || $mqr[QR_K][$i] == -1 || $mqr[QR_N][$i] == -1;
    }, function ($i, $j) use ($mqr, $bits) {
        return $mqr[QR_K][$i] + $bits[QR_K][$j] + $mqr[QR_N][$i] + $bits[QR_N][1] < $bits[QR_B][$j * 2 + 1];
    }, function ($i, $j) use ($rmqr, $bits) {
        return $rmqr[QR_K][$i] + $bits[QR_K][$j] + $rmqr[QR_N][$i] + $bits[QR_N][1] < $bits[QR_B][$j * 2 + 1];
    }
);
set_and_print_arr('modeBKbeforeE', BITS_CHAR_MAX / 2,
    function($i, $j) use ($qr, $bits) {
        return $qr[QR_K][$i] + $bits[QR_K][$j] < $bits[QR_B][$j * 2];
    }, function ($i) use ($mqr) {
        return $mqr[QR_K][$i] == -1 || $mqr[QR_B][$i] == -1;
    }, function ($i, $j) use ($mqr, $bits) {
        return $mqr[QR_K][$i] + $bits[QR_K][$j] < $bits[QR_B][$j * 2];
    }, function ($i, $j) use ($rmqr, $bits) {
        return $rmqr[QR_K][$i] + $bits[QR_K][$j] < $bits[QR_B][$j * 2];
    }
);
print PHP_EOL;

set_and_print_arr('modeBAbeforeK', BITS_CHAR_MAX,
    function($i, $j) use ($qr, $bits) {
        return $qr[QR_A][$i] + $bits[QR_A][$j] + $qr[QR_K][$i] < $bits[QR_B][$j];
    }, function ($i) use ($mqr) {
        return $mqr[QR_B][$i] == -1 || $mqr[QR_A][$i] == -1 || $mqr[QR_K][$i] == -1;
    }, function ($i, $j) use ($mqr, $bits) {
        return $mqr[QR_A][$i] + $bits[QR_A][$j] + $mqr[QR_K][$i] < $bits[QR_B][$j];
    }, function ($i, $j) use ($rmqr, $bits) {
        return $rmqr[QR_A][$i] + $bits[QR_A][$j] + $rmqr[QR_K][$i] < $bits[QR_B][$j];
    }
);
set_and_print_arr('modeBAbeforeB', BITS_CHAR_MAX,
    function($i, $j) use ($qr, $bits) {
        return $qr[QR_A][$i] + $bits[QR_A][$j] + $qr[QR_B][$i] < $bits[QR_B][$j];
    }, function ($i) use ($mqr) {
        return $mqr[QR_B][$i] == -1 || $mqr[QR_A][$i] == -1;
    }, function ($i, $j) use ($mqr, $bits) {
        return $mqr[QR_A][$i] + $bits[QR_A][$j] + $mqr[QR_B][$i] < $bits[QR_B][$j];
    }, function ($i, $j) use ($rmqr, $bits) {
        return $rmqr[QR_A][$i] + $bits[QR_A][$j] + $rmqr[QR_B][$i] < $bits[QR_B][$j];
    }
);
set_and_print_arr('modeBAbeforeN', BITS_CHAR_MAX,
    function($i, $j) use ($qr, $bits) {
        return $qr[QR_A][$i] + $bits[QR_A][$j] + $qr[QR_N][$i] < $bits[QR_B][$j];
    }, function ($i) use ($mqr) {
        return $mqr[QR_B][$i] == -1 || $mqr[QR_A][$i] == -1 || $mqr[QR_N][$i] == -1;
    }, function ($i, $j) use ($mqr, $bits) {
        return $mqr[QR_A][$i] + $bits[QR_A][$j] + $mqr[QR_N][$i] < $bits[QR_B][$j];
    }, function ($i, $j) use ($rmqr, $bits) {
        return $rmqr[QR_A][$i] + $bits[QR_A][$j] + $rmqr[QR_N][$i] < $bits[QR_B][$j];
    }
);
set_and_print_arr('modeBAbeforeE', BITS_CHAR_MAX,
    function($i, $j) use ($qr, $bits) {
        return $qr[QR_A][$i] + $bits[QR_A][$j] < $bits[QR_B][$j];
    }, function ($i) use ($mqr) {
        return $mqr[QR_B][$i] == -1 || $mqr[QR_A][$i] == -1;
    }, function ($i, $j) use ($mqr, $bits) {
        return $mqr[QR_A][$i] + $bits[QR_A][$j] < $bits[QR_B][$j];
    }, function ($i, $j) use ($rmqr, $bits) {
        return $rmqr[QR_A][$i] + $bits[QR_A][$j] < $bits[QR_B][$j];
    }
);
print PHP_EOL;

set_and_print_arr('modeBNbeforeK', BITS_CHAR_MAX,
    function($i, $j) use ($qr, $bits) {
        return $qr[QR_N][$i] + $bits[QR_N][$j] + $qr[QR_K][$i] < $bits[QR_B][$j];
    }, function ($i) use ($mqr) {
        return $mqr[QR_B][$i] == -1 || $mqr[QR_N][$i] == -1 || $mqr[QR_K][$i] == -1;
    }, function ($i, $j) use ($mqr, $bits) {
        return $mqr[QR_N][$i] + $bits[QR_N][$j] + $mqr[QR_K][$i] < $bits[QR_B][$j];
    }, function ($i, $j) use ($rmqr, $bits) {
        return $rmqr[QR_N][$i] + $bits[QR_N][$j] + $rmqr[QR_K][$i] < $bits[QR_B][$j];
    }
);
set_and_print_arr('modeBNbeforeB', BITS_CHAR_MAX,
    function($i, $j) use ($qr, $bits) {
        return $qr[QR_N][$i] + $bits[QR_N][$j] + $qr[QR_B][$i] < $bits[QR_B][$j];
    }, function ($i) use ($mqr) {
        return $mqr[QR_B][$i] == -1 || $mqr[QR_N][$i] == -1;
    }, function ($i, $j) use ($mqr, $bits) {
        return $mqr[QR_N][$i] + $bits[QR_N][$j] + $mqr[QR_B][$i] < $bits[QR_B][$j];
    }, function ($i, $j) use ($rmqr, $bits) {
        return $rmqr[QR_N][$i] + $bits[QR_N][$j] + $rmqr[QR_B][$i] < $bits[QR_B][$j];
    }
);
set_and_print_arr('modeBNbeforeA', BITS_CHAR_MAX,
    function($i, $j) use ($qr, $bits) {
        return $qr[QR_N][$i] + $bits[QR_N][$j] + $qr[QR_A][$i] < $bits[QR_B][$j];
    }, function ($i) use ($mqr) {
        return $mqr[QR_B][$i] == -1 || $mqr[QR_N][$i] == -1 || $mqr[QR_A][$i] == -1;
    }, function ($i, $j) use ($mqr, $bits) {
        return $mqr[QR_N][$i] + $bits[QR_N][$j] + $mqr[QR_A][$i] < $bits[QR_B][$j];
    }, function ($i, $j) use ($rmqr, $bits) {
        return $rmqr[QR_N][$i] + $bits[QR_N][$j] + $rmqr[QR_A][$i] < $bits[QR_B][$j];
    }
);
set_and_print_arr('modeBNbeforeE', BITS_CHAR_MAX,
    function($i, $j) use ($qr, $bits) {
        /* NOTE: using <= here for (semi) back-compatibility */
        return $qr[QR_N][$i] + $bits[QR_N][$j] <= $bits[QR_B][$j];
    }, function ($i) use ($mqr) {
        return $mqr[QR_B][$i] == -1 || $mqr[QR_N][$i] == -1;
    }, function ($i, $j) use ($mqr, $bits) {
        return $mqr[QR_N][$i] + $bits[QR_N][$j] < $bits[QR_B][$j];
    }, function ($i, $j) use ($rmqr, $bits) {
        return $rmqr[QR_N][$i] + $bits[QR_N][$j] < $bits[QR_B][$j];
    }
);
print PHP_EOL;

set_and_print_arr('modeANbeforeA', BITS_CHAR_MAX,
    function($i, $j) use ($qr, $bits) {
        return $qr[QR_N][$i] + $bits[QR_N][$j] + $qr[QR_A][$i] < $bits[QR_A][$j];
    }, function ($i) use ($mqr) {
        return $mqr[QR_A][$i] == -1 || $mqr[QR_N][$i] == -1;
    }, function ($i, $j) use ($mqr, $bits) {
        return $mqr[QR_N][$i] + $bits[QR_N][$j] + $mqr[QR_A][$i] < $bits[QR_A][$j];
    }, function ($i, $j) use ($rmqr, $bits) {
        return $rmqr[QR_N][$i] + $bits[QR_N][$j] + $rmqr[QR_A][$i] < $bits[QR_A][$j];
    }
);
set_and_print_arr('modeANbeforeB', BITS_CHAR_MAX,
    function($i, $j) use ($qr, $bits) {
        return $qr[QR_N][$i] + $bits[QR_N][$j] + $qr[QR_B][$i] < $bits[QR_A][$j];
    }, function ($i) use ($mqr) {
        return $mqr[QR_A][$i] == -1 || $mqr[QR_N][$i] == -1 || $mqr[QR_B][$i] == -1;
    }, function ($i, $j) use ($mqr, $bits) {
        return $mqr[QR_N][$i] + $bits[QR_N][$j] + $mqr[QR_B][$i] < $bits[QR_A][$j];
    }, function ($i, $j) use ($rmqr, $bits) {
        return $rmqr[QR_N][$i] + $bits[QR_N][$j] + $rmqr[QR_B][$i] < $bits[QR_A][$j];
    }
);
set_and_print_arr('modeANbeforeE', BITS_CHAR_MAX,
    function($i, $j) use ($qr, $bits) {
        return $qr[QR_N][$i] + $bits[QR_N][$j] < $bits[QR_A][$j];
    }, function ($i) use ($mqr) {
        return $mqr[QR_A][$i] == -1 || $mqr[QR_N][$i] == -1;
    }, function ($i, $j) use ($mqr, $bits) {
        return $mqr[QR_N][$i] + $bits[QR_N][$j] < $bits[QR_A][$j];
    }, function ($i, $j) use ($rmqr, $bits) {
        return $rmqr[QR_N][$i] + $bits[QR_N][$j] < $bits[QR_A][$j];
    }
);

/* vim: set ts=4 sw=4 et : */
